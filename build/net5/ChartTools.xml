<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ChartTools</name>
    </assembly>
    <members>
        <member name="T:ChartTools.Chord">
            <summary>
            Base class for chords
            </summary>
        </member>
        <member name="P:ChartTools.Chord.Notes">
            <summary>
            Notes in the <see cref="!:Chord&lt;TNote&gt;"/>
            </summary>
        </member>
        <member name="M:ChartTools.Chord.#ctor(System.UInt32)">
            <param name="position">Position of the Chord on the Track</param>
        </member>
        <member name="M:ChartTools.Chord.GetChartNoteData">
            <summary>
            Gets the data to write in a chart file.
            </summary>
            <returns>Enumerable of strings containing the data to add to each line</returns>
        </member>
        <member name="T:ChartTools.Chord`3">
            <summary>
            Set of notes played simultaneously
            </summary>
        </member>
        <member name="M:ChartTools.Chord`3.#ctor(System.UInt32)">
            <inheritdoc cref="M:ChartTools.Chord.#ctor(System.UInt32)" path="/param"/>
        </member>
        <member name="T:ChartTools.DrumsChord">
            <summary>
            Set of notes played simultaneously by drums
            </summary>
        </member>
        <member name="M:ChartTools.DrumsChord.#ctor(System.UInt32)">
            <inheritdoc cref="M:ChartTools.Chord.#ctor(System.UInt32)"/>
        </member>
        <member name="M:ChartTools.DrumsChord.#ctor(System.UInt32,ChartTools.DrumsNote[])">
            <inheritdoc cref="M:ChartTools.DrumsChord.#ctor(System.UInt32)"/>
            <param name="notes">Notes to add</param>
        </member>
        <member name="M:ChartTools.DrumsChord.#ctor(System.UInt32,ChartTools.DrumsLane[])">
            <inheritdoc cref="M:ChartTools.DrumsChord.#ctor(System.UInt32,ChartTools.DrumsNote[])"/>
        </member>
        <member name="T:ChartTools.GHLChord">
            <summary>
            Set of notes played simultaneously by a Guitar Hero Live instrument
            </summary>
        </member>
        <member name="M:ChartTools.GHLChord.#ctor(System.UInt32)">
            <inheritdoc cref="M:ChartTools.Chord.#ctor(System.UInt32)"/>
        </member>
        <member name="M:ChartTools.GHLChord.#ctor(System.UInt32,ChartTools.Note{ChartTools.GHLLane}[])">
            <inheritdoc cref="M:ChartTools.GHLChord.#ctor(System.UInt32)"/>
            <param name="notes">Notes to add</param>
        </member>
        <member name="M:ChartTools.GHLChord.#ctor(System.UInt32,ChartTools.GHLLane[])">
            <inheritdoc cref="!:GHLChord(uint, GHLNote[])"/>
        </member>
        <member name="P:ChartTools.Lyrics.Phrase.RawText">
            <summary>
            Gets the raw text of all syllables as a single string with spaces between syllables
            </summary>
        </member>
        <member name="T:ChartTools.Lyrics.PhraseExtensions">
            <summary>
            Provides additional methods to <see cref="T:ChartTools.Lyrics.Phrase"/>
            </summary>
        </member>
        <member name="M:ChartTools.Lyrics.PhraseExtensions.ToGlobalEvents(System.Collections.Generic.IEnumerable{ChartTools.Lyrics.Phrase})">
            <summary>
            Converts a set of <see cref="T:ChartTools.Lyrics.Phrase"/> to a set of <see cref="T:ChartTools.GlobalEvent"/> making up the phrases.
            </summary>
            <param name="source">Phrases to convert into global events</param>
            <returns>Global events making up the phrases</returns>
        </member>
        <member name="T:ChartTools.Lyrics.Syllable">
            <summary>
            Karaoke step of a <see cref="T:ChartTools.Lyrics.Phrase"/>
            </summary>
        </member>
        <member name="P:ChartTools.Lyrics.Syllable.RawText">
            <summary>
            Argument of the native <see cref="T:ChartTools.GlobalEvent"/>
            </summary>
            <remarks>Setting to <see langword="null"/> will set to an empty string.</remarks>
        </member>
        <member name="P:ChartTools.Lyrics.Syllable.DisplayedText">
            <summary>
            The syllable as it is displayed in-game
            </summary>
        </member>
        <member name="P:ChartTools.Lyrics.Syllable.IsWordEnd">
            <summary>
            <see langword="true"/> if is the last syllable or the only syllable of its word
            </summary>
        </member>
        <member name="T:ChartTools.StandardChord">
            <summary>
            Set of notes played simultaneously by a standard five-fret instrument
            </summary>
        </member>
        <member name="M:ChartTools.StandardChord.#ctor(System.UInt32)">
            <inheritdoc cref="M:ChartTools.Chord.#ctor(System.UInt32)"/>
        </member>
        <member name="M:ChartTools.StandardChord.#ctor(System.UInt32,ChartTools.Note{ChartTools.StandardLane}[])">
            <inheritdoc cref="M:ChartTools.StandardChord.#ctor(System.UInt32)"/>
            <param name="notes">Notes to add</param>
        </member>
        <member name="M:ChartTools.StandardChord.#ctor(System.UInt32,ChartTools.StandardLane[])">
            <inheritdoc cref="!:StandardChord(uint, StandardNote[])"/>
        </member>
        <member name="T:ChartTools.Difficulty">
            <summary>
            Difficulty levels
            </summary>
        </member>
        <member name="T:ChartTools.DrumsChordModifier">
            <summary>
            Modifier that affects the way the chord can be played
            </summary>
        </member>
        <member name="F:ChartTools.DrumsChordModifier.Accent">
            <summary>
            *Unsupported*
            </summary>
        </member>
        <member name="F:ChartTools.DrumsChordModifier.Ghost">
            <summary>
            *Unsupported*
            </summary>
        </member>
        <member name="T:ChartTools.DrumsLane">
            <summary>
            Drums pads and pedals for a <see cref="T:ChartTools.DrumsNote"/>
            </summary>
        </member>
        <member name="F:ChartTools.DrumsLane.Green4Lane_Orange5Lane">
            <summary>
            Green when playing with four pads, orange when playing with five pads
            </summary>
        </member>
        <member name="F:ChartTools.DrumsLane.Green5Lane">
            <summary>
            Green when playing with five pad, otherwise converted to <see cref="F:ChartTools.DrumsLane.Green4Lane_Orange5Lane"/>
            </summary>
        </member>
        <member name="F:ChartTools.DrumsLane.DoubleKick">
            <summary>
            <see cref="F:ChartTools.DrumsLane.Kick"/> that only appears when playing with multiple pedals
            </summary>
        </member>
        <member name="T:ChartTools.GHLChordModifier">
            <summary>
            Modifier that affects how a <see cref="T:ChartTools.GHLChord"/> can be played
            </summary>
        </member>
        <member name="F:ChartTools.GHLChordModifier.ExplicitHopo">
            <summary>
            The Hopo state is not relative to the previous chord.
            </summary>
        </member>
        <member name="F:ChartTools.GHLChordModifier.HopoInvert">
            <summary>
            Forced Hopo or inverts the natural state if <see cref="!:Relative"/> is set.
            </summary>
        </member>
        <member name="T:ChartTools.GHLInstrument">
            <summary>
            Guitar Hero Live instruments
            </summary>
            <remarks>Casting to <see cref="T:ChartTools.Instruments"/> will match the instrument.</remarks>
        </member>
        <member name="T:ChartTools.GHLLane">
            <summary>
            Frets for a <see cref="!:GHLNote"/>
            </summary>
        </member>
        <member name="T:ChartTools.GlobalEventType">
            <summary>
            Types of <see cref="T:ChartTools.GlobalEvent"/>
            </summary>
        </member>
        <member name="F:ChartTools.GlobalEventType.Unknown">
            <summary>
            The backing <see cref="P:ChartTools.Event.EventTypeString"/> property does not match a known event type
            </summary>
        </member>
        <member name="F:ChartTools.GlobalEventType.PhraseStart">
            <summary>
            Marks the start of a new <see cref="T:ChartTools.Lyrics.Phrase"/>
            </summary>
        </member>
        <member name="F:ChartTools.GlobalEventType.PhraseEnd">
            <summary>
            Marks the end of the current <see cref="T:ChartTools.Lyrics.Phrase"/>
            </summary>
        </member>
        <member name="F:ChartTools.GlobalEventType.Lyric">
            <summary>
            Marks a <see cref="T:ChartTools.Lyrics.Syllable"/> in the current <see cref="T:ChartTools.Lyrics.Phrase"/>
            </summary>
        </member>
        <member name="F:ChartTools.GlobalEventType.Section">
            <summary>
            Marks a new section used by Practice mode and in post-game summary
            </summary>
        </member>
        <member name="T:ChartTools.Instruments">
            <summary>
            All instruments
            </summary>
        </member>
        <member name="T:ChartTools.LightingEffect">
            <summary>
            Lighting effect caused by a <see cref="T:ChartTools.GlobalEvent"/> of type <see cref="F:ChartTools.GlobalEventType.Lighting"/>
            </summary>
        </member>
        <member name="F:ChartTools.LightingEffect.Unknwon">
            <summary>
            The backing argument of the event does not match a known lighting effect
            </summary>
        </member>
        <member name="T:ChartTools.LocalEventType">
            <summary>
            Types of <see cref="T:ChartTools.LocalEvent"/>
            </summary>
        </member>
        <member name="F:ChartTools.LocalEventType.Unknown">
            <summary>
            The backing <see cref="P:ChartTools.Event.EventTypeString"/> property does not match a known event type
            </summary>
        </member>
        <member name="F:ChartTools.LocalEventType.Solo">
            <summary>
            Marks the start of a Rock Band style solo section
            </summary>
        </member>
        <member name="F:ChartTools.LocalEventType.SoloEnd">
            <summary>
            Marks the end of a Rock Band style solo section
            </summary>
        </member>
        <member name="T:ChartTools.RockBandSectionFormat">
            <summary>
            Defines how section global events are written
            </summary>
        </member>
        <member name="T:ChartTools.StandardChordModifier">
            <summary>
            Modifier that affects how a <see cref="T:ChartTools.StandardChord"/> can be played
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ChartTools.StandardChordModifier.ExplicitHopo">
            <summary>
            The Hopo state is not relative to the previous chord.
            </summary>
        </member>
        <member name="F:ChartTools.StandardChordModifier.HopoInvert">
            <summary>
            Forced Hopo or inverts the natural state if <see cref="!:Relative"/> is set.
            </summary>
        </member>
        <member name="T:ChartTools.StandardInstrument">
            <summary>
            Standard five-fret instruments
            </summary>
            <remarks><inheritdoc cref="T:ChartTools.GHLInstrument"/></remarks>
        </member>
        <member name="T:ChartTools.StandardLane">
            <summary>
            Frets for a <see cref="!:StandardNote"/>
            </summary>
        </member>
        <member name="T:ChartTools.Event">
            <summary>
            Marker that defines an occurrence at a given point in a song.
            </summary>
        </member>
        <member name="P:ChartTools.Event.EventTypeString">
            <summary>
            Type of event as it is written in the file
            </summary>
        </member>
        <member name="M:ChartTools.Event.#ctor(System.UInt32,System.String)">
            <summary>
            Creates an instance of <see cref="T:ChartTools.Event"/>.
            </summary>
            <param name="position">Value of <see cref="P:ChartTools.TrackObject.Position"/></param>
            <param name="eventData">Value of <see cref="P:ChartTools.Event.EventData"/></param>
        </member>
        <member name="T:ChartTools.GlobalEvent">
            <summary>
            Event common to all instruments
            </summary>
        </member>
        <member name="P:ChartTools.GlobalEvent.GlobalRockBandSectionFormat">
            <summary>
            Format in which events will be written when set to the <see cref="F:ChartTools.GlobalEventType.Section"/> type
            </summary>
        </member>
        <member name="F:ChartTools.GlobalEvent.globalTypesDictionary">
            <summary>
            <see cref="P:ChartTools.Event.EventTypeString"/> value for each <see cref="T:ChartTools.GlobalEventType"/>
            </summary>
        </member>
        <member name="P:ChartTools.GlobalEvent.EventType">
            <inheritdoc cref="P:ChartTools.Event.EventTypeString"/>
        </member>
        <member name="P:ChartTools.GlobalEvent.IsLyricEvent">
            <summary>
            The event serves to display lyrics
            </summary>
        </member>
        <member name="P:ChartTools.GlobalEvent.IsCrowdEvent">
            <summary>
            The event controls the crowd
            </summary>
        </member>
        <member name="P:ChartTools.GlobalEvent.Argument">
            <summary>
            Additional data to modify the outcome of the event
            </summary>
            <remarks>A lack of argument is represented as an empty string.</remarks>
        </member>
        <member name="P:ChartTools.GlobalEvent.RockBandSectionFormat">
            <summary>
            Rock Band format the section event is written in
            </summary>
            <remarks><see langword="null"/> if the event is not a section.</remarks>
        </member>
        <member name="P:ChartTools.GlobalEvent.LightingEffect">
            <summary>
            Effect caused by the event if it is a lighting event
            </summary>
            <remarks><see langword="null"/> if the event is not a lighting event</remarks>
        </member>
        <member name="P:ChartTools.GlobalEvent.LightingEffectSting">
            <summary>
            Lighting effect as it is written in the file
            </summary>
        </member>
        <member name="M:ChartTools.GlobalEvent.#ctor(System.UInt32,ChartTools.GlobalEventType,System.String)">
            <summary>
            Creates an instance of <see cref="T:ChartTools.GlobalEvent"/>.
            </summary>
            <param name="position">Value of <see cref="P:ChartTools.TrackObject.Position"/></param>
            <param name="type">Value of <see cref="P:ChartTools.GlobalEvent.EventType"/></param>
            <param name="argument">Value of <see cref="!:Event.Argument"/></param>
        </member>
        <member name="M:ChartTools.GlobalEvent.#ctor(System.UInt32,System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:ChartTools.GlobalEvent"/>.
            </summary>
            <param name="position">Value of <see cref="P:ChartTools.TrackObject.Position"/></param>
            <param name="type">Value of <see cref="!:EventTypeString"/></param>
            <param name="argument">Value of <see cref="P:ChartTools.GlobalEvent.Argument"/></param>
        </member>
        <member name="M:ChartTools.GlobalEvent.GetEventTypeString(ChartTools.GlobalEventType)">
            <summary>
            Gets the string value to set <see cref="P:ChartTools.Event.EventTypeString"/>.
            </summary>
            <param name="type">Event type to get the string value of</param>
        </member>
        <member name="M:ChartTools.GlobalEvent.ToFile(System.String,System.Collections.Generic.IEnumerable{ChartTools.GlobalEvent},ChartTools.IO.WritingConfiguration)">
            <inheritdoc cref="!:ChartParser.ReplaceGlobalEvents(string, IEnumerable&lt;GlobalEvent&gt;)"/>
        </member>
        <member name="T:ChartTools.LocalEvent">
            <summary>
            Event specific to an instrument and difficulty
            </summary>
        </member>
        <member name="F:ChartTools.LocalEvent.localTypesDictionary">
            <summary>
            <see cref="P:ChartTools.Event.EventTypeString"/> value for each <see cref="T:ChartTools.LocalEventType"/>
            </summary>
        </member>
        <member name="P:ChartTools.LocalEvent.EventType">
            <inheritdoc cref="P:ChartTools.Event.EventTypeString"/>
        </member>
        <member name="M:ChartTools.LocalEvent.#ctor(System.UInt32,ChartTools.LocalEventType)">
            <summary>
            Creates an instance of <see cref="T:ChartTools.LocalEvent"/>.
            </summary>
            <param name="position">Value of <see cref="P:ChartTools.TrackObject.Position"/></param>
            <param name="type">Value of <see cref="P:ChartTools.LocalEvent.EventType"/></param>
            <param name="argument">Value of <see cref="!:Event.Argument"/></param>
        </member>
        <member name="M:ChartTools.LocalEvent.#ctor(System.UInt32,System.String)">
            <summary>
            Creates an instance of <see cref="T:ChartTools.LocalEvent"/>.
            </summary>
            <param name="position">Value of <see cref="P:ChartTools.TrackObject.Position"/></param>
            <param name="type">Value of <see cref="!:EventTypeString"/></param>
            <param name="argument">Value of <see cref="!:Argument"/></param>
        </member>
        <member name="M:ChartTools.LocalEvent.GetEventTypeString(ChartTools.LocalEventType)">
            <inheritdoc cref="M:ChartTools.GlobalEvent.GetEventTypeString(ChartTools.GlobalEventType)"/>
        </member>
        <member name="T:ChartTools.Instrument">
            <summary>
            Base class for instruments
            </summary>
        </member>
        <member name="P:ChartTools.Instrument.Difficulty">
            <summary>
            Estimated difficulty
            </summary>
        </member>
        <member name="P:ChartTools.Instrument.Easy">
            <summary>
            Easy track
            </summary>
        </member>
        <member name="P:ChartTools.Instrument.Medium">
            <summary>
            Medium track
            </summary>
        </member>
        <member name="P:ChartTools.Instrument.Hard">
            <summary>
            Hard track
            </summary>
        </member>
        <member name="P:ChartTools.Instrument.Expert">
            <summary>
            Expert track
            </summary>
        </member>
        <member name="M:ChartTools.Instrument.GetTrack(ChartTools.Difficulty)">
            <summary>
            Gets the track matching a difficulty.
            </summary>
        </member>
        <member name="M:ChartTools.Instrument.FromFile(System.String,ChartTools.Instruments,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads an instrument from a file.
            </summary>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReadInstrument(System.String,ChartTools.Instruments,ChartTools.IO.ReadingConfiguration)"/>
        </member>
        <member name="M:ChartTools.Instrument.FromFile(System.String,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads drums from a file.
            </summary>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReadDrums(System.String,ChartTools.IO.ReadingConfiguration)"/>
        </member>
        <member name="M:ChartTools.Instrument.FromFile(System.String,ChartTools.GHLInstrument,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads a GHL instrument from a file.
            </summary>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReadInstrument(System.String,ChartTools.GHLInstrument,ChartTools.IO.ReadingConfiguration)" />
        </member>
        <member name="M:ChartTools.Instrument.FromFile(System.String,ChartTools.StandardInstrument,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads a standard instrument from a file.
            </summary>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReadInstrument(System.String,ChartTools.StandardInstrument,ChartTools.IO.ReadingConfiguration)"/>
        </member>
        <member name="M:ChartTools.Instrument.ReadDifficulty(System.String,ChartTools.Instruments)">
            <inheritdoc cref="M:ChartTools.IO.Ini.IniParser.ReadDifficulty(System.String,ChartTools.Instruments)"/>
        </member>
        <member name="M:ChartTools.Instrument.WriteDifficulty(System.String,ChartTools.Instruments,System.SByte)">
            <inheritdoc cref="M:ChartTools.IO.Ini.IniParser.WriteDifficulty(System.String,ChartTools.Instruments,System.SByte)"/>
        </member>
        <member name="T:ChartTools.Instrument`1">
            <summary>
            Set of tracks common to an instrument
            </summary>
        </member>
        <member name="P:ChartTools.Instrument`1.Easy">
            <summary>
            Easy track
            </summary>
        </member>
        <member name="P:ChartTools.Instrument`1.Medium">
            <summary>
            Medium track
            </summary>
        </member>
        <member name="P:ChartTools.Instrument`1.Hard">
            <summary>
            Hard track
            </summary>
        </member>
        <member name="P:ChartTools.Instrument`1.Expert">
            <summary>
            Expert track
            </summary>
        </member>
        <member name="M:ChartTools.Instrument`1.GetTrack(ChartTools.Difficulty)">
            <summary>
            Gets the <see cref="T:ChartTools.Track`1"/> that matches a <see cref="T:ChartTools.Difficulty"/>
            </summary>
        </member>
        <member name="M:ChartTools.Instrument`1.SetTrack(ChartTools.Track{`0},ChartTools.Difficulty)">
            <summary>
            Sets a track for a given <see cref="T:ChartTools.Difficulty"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ChartTools.Instrument`1.ShareLocalEvents(ChartTools.IO.TrackObjectSource)">
            <summary>
            Gives all tracks the same local events.
            </summary>
        </member>
        <member name="M:ChartTools.Instrument`1.ShareStarPower(ChartTools.IO.TrackObjectSource)">
            <summary>
            Gives all tracks the same star power
            </summary>
        </member>
        <member name="T:ChartTools.Collections.Alternating.OrderedAlternatingEnumerable`2">
            <summary>
            Enumerable where <typeparamref name="T"/> items are pulled from a set of enumerables in order using a <typeparamref name="TKey"/> key
            </summary>
            <typeparam name="T">Type of the enumerated items</typeparam>
            <typeparam name="TKey">Type of the key used to determine the order</typeparam>
        </member>
        <member name="P:ChartTools.Collections.Alternating.OrderedAlternatingEnumerable`2.Enumerables">
            <summary>
            Enumerables to alternate between
            </summary>
        </member>
        <member name="P:ChartTools.Collections.Alternating.OrderedAlternatingEnumerable`2.KeyGetter">
            <summary>
            Method that retrieves the key from an item
            </summary>
        </member>
        <member name="M:ChartTools.Collections.Alternating.OrderedAlternatingEnumerable`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEnumerable{`1}[])">
            <summary>
            Creates an instance of <see cref="T:ChartTools.Collections.Alternating.OrderedAlternatingEnumerable`2"/>.
            </summary>
            <param name="keyGetter">Method that retrieves the key from an item</param>
            <param name="enumerables">Enumerables to alternate between</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:ChartTools.Collections.Alternating.OrderedAlternatingEnumerable`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Alternating.OrderedAlternatingEnumerable`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:ChartTools.Collections.Alternating.OrderedAlternatingEnumerator`2">
            <summary>
            Enumerator that yields <typeparamref name="T"/> items from a set of enumerators in order using a <typeparamref name="TKey"/> key
            </summary>
            <typeparam name="T">Type of the enumerated items</typeparam>
            <typeparam name="TKey">Type of the key used to determine the order</typeparam>
        </member>
        <member name="P:ChartTools.Collections.Alternating.OrderedAlternatingEnumerator`2.KeyGetter">
            <summary>
            Method that retrieves the key from an item
            </summary>
        </member>
        <member name="P:ChartTools.Collections.Alternating.OrderedAlternatingEnumerator`2.Initialized">
            <inheritdoc/>
        </member>
        <member name="P:ChartTools.Collections.Alternating.OrderedAlternatingEnumerator`2.Current">
            <inheritdoc/>
        </member>
        <member name="P:ChartTools.Collections.Alternating.OrderedAlternatingEnumerator`2.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="F:ChartTools.Collections.Alternating.OrderedAlternatingEnumerator`2.endsReached">
            <summary>
            <see langword="true"/> for indexes where MoveNext previously returned <see langword="false"/>
            </summary>
        </member>
        <member name="M:ChartTools.Collections.Alternating.OrderedAlternatingEnumerator`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEnumerator{`0}[])">
            <summary>
            Creates a new instance of <see cref="T:ChartTools.Collections.Alternating.OrderedAlternatingEnumerator`2"/>.
            </summary>
            <param name="keyGetter">Method that retrieves the key from an item</param>
            <param name="enumerators">Enumerators to alternate between</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:ChartTools.Collections.Alternating.OrderedAlternatingEnumerator`2.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Alternating.OrderedAlternatingEnumerator`2.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Alternating.OrderedAlternatingEnumerator`2.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Alternating.OrderedAlternatingEnumerator`2.Reset">
            <inheritdoc/>
        </member>
        <member name="T:ChartTools.Collections.Alternating.SerialAlternatingEnumerable`1">
            <summary>
            Enumerable where <typeparamref name="T"/> items are yielded by alternating from a set of enumerables
            </summary>
            <typeparam name="T">Type of the enumerated items</typeparam>
        </member>
        <member name="P:ChartTools.Collections.Alternating.SerialAlternatingEnumerable`1.Enumerables">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Alternating.SerialAlternatingEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            Creates an instance of <see cref="T:ChartTools.Collections.Alternating.SerialAlternatingEnumerable`1"/>
            </summary>
            <param name="enumerables">Enumerables to pull items from</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:ChartTools.Collections.Alternating.SerialAlternatingEnumerable`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Alternating.SerialAlternatingEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:ChartTools.Collections.Alternating.SerialAlternatingEnumerator`1">
            <summary>
            Enumerator that yields <typeparamref name="T"/> items by alternating through a set of enumerators
            </summary>
            <typeparam name="T">Type of the enumerated items</typeparam>
        </member>
        <member name="P:ChartTools.Collections.Alternating.SerialAlternatingEnumerator`1.Enumerators">
            <summary>
            Enumerators to alternate between
            </summary>
        </member>
        <member name="F:ChartTools.Collections.Alternating.SerialAlternatingEnumerator`1.index">
            <summary>
            Position of the next enumerator to pull from
            </summary>
        </member>
        <member name="P:ChartTools.Collections.Alternating.SerialAlternatingEnumerator`1.Current">
            <summary>
            Item to use in the iteration
            </summary>
        </member>
        <member name="P:ChartTools.Collections.Alternating.SerialAlternatingEnumerator`1.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Alternating.SerialAlternatingEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0}[])">
            <summary>
            Creates an instance of <see cref="T:ChartTools.Collections.Alternating.SerialAlternatingEnumerator`1"/>
            </summary>
            <param name="enumerators">Enumerators to alternate between</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:ChartTools.Collections.Alternating.SerialAlternatingEnumerator`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Alternating.SerialAlternatingEnumerator`1.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Alternating.SerialAlternatingEnumerator`1.Reset">
            <inheritdoc/>
        </member>
        <member name="T:ChartTools.Collections.Sorted.IndexableSelfSorted`2">
            <summary>
            *Deprecated* Collection where <typeparamref name="TValue"/> items are always sorted based on a <typeparamref name="TKey"/> key
            </summary>
            <typeparam name="TKey">Type of the key to use as in index</typeparam>
            <typeparam name="TValue">Type of the contained items</typeparam>
        </member>
        <member name="F:ChartTools.Collections.Sorted.IndexableSelfSorted`2.GetKey">
            <summary>
            Method that retrieves the key from an item
            </summary>
        </member>
        <member name="P:ChartTools.Collections.Sorted.IndexableSelfSorted`2.AllowDuplicates">
            <summary>
            <see langword="true"/> if multiple items can have the same key. Items of the same key are sorted using the default <see cref="T:System.IComparable`1"/> comparison of <typeparamref name="TValue"/>.
            </summary>
        </member>
        <member name="P:ChartTools.Collections.Sorted.IndexableSelfSorted`2.KeyCount">
            <summary>
            Gets the number of unique keys from the items
            </summary>
        </member>
        <member name="M:ChartTools.Collections.Sorted.IndexableSelfSorted`2.#ctor(System.Func{`1,`0},System.Int32)">
            <summary>
            Creates an instance of <see cref="T:ChartTools.Collections.Sorted.IndexableSelfSorted`2"/>.
            </summary>
            <param name="keyGetter">Method that retrieves the key from an item</param>
            <param name="capacity">Number of items that the <see cref="T:ChartTools.Collections.Sorted.IndexableSelfSorted`2"/> can initially store</param>
        </member>
        <member name="M:ChartTools.Collections.Sorted.IndexableSelfSorted`2.GetValues(`0)">
            <summary>
            Gets the items matching a key.
            </summary>
            <param name="key">Key to match the items against</param>
        </member>
        <member name="M:ChartTools.Collections.Sorted.IndexableSelfSorted`2.Add(`1)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:ChartTools.Collections.Sorted.IndexableSelfSorted`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <param name="items">Items to add</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:ChartTools.Collections.Sorted.IndexableSelfSorted`2.ContainsDuplicate(`1)">
            <summary>
            Determines if the collection contains any item of the same key as the provided item.
            </summary>
            <param name="item">Item to search for duplicates of</param>
        </member>
        <member name="P:ChartTools.Collections.Sorted.IndexableSelfSorted`2.Item(`0)">
            <summary>
            Gets or replaces the items matching a key.
            </summary>
            <param name="key">Key to match the items against</param>
            <returns></returns>
        </member>
        <member name="M:ChartTools.Collections.Sorted.IndexableSelfSorted`2.RemoveAt(`0)">
            <summary>Removes the items matching a key.</summary>
            <param name="key">Key of items to remove</param>
        </member>
        <member name="T:ChartTools.Collections.Sorted.SelfSorted`1">
            <summary>
            *Deprecated* Collection where <typeparamref name="T"/> items are always sorted
            </summary>
            <typeparam name="T">Type of the contained items</typeparam>
        </member>
        <member name="F:ChartTools.Collections.Sorted.SelfSorted`1.items">
            <summary>
            Source of non-sorted items
            </summary>
        </member>
        <member name="P:ChartTools.Collections.Sorted.SelfSorted`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:ChartTools.Collections.Sorted.SelfSorted`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Sorted.SelfSorted`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of <see cref="T:ChartTools.Collections.Sorted.SelfSorted`1"/>.
            </summary>
            <param name="capacity">Number of items that the <see cref="T:ChartTools.Collections.Sorted.IndexableSelfSorted`2"/> can initially store</param>
        </member>
        <member name="P:ChartTools.Collections.Sorted.SelfSorted`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">Index of the item</param>
        </member>
        <member name="M:ChartTools.Collections.Sorted.SelfSorted`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Sorted.SelfSorted`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple items to the <see cref="T:ChartTools.Collections.Sorted.SelfSorted`1"/>.
            </summary>
            <param name="items">Items to add</param>
        </member>
        <member name="M:ChartTools.Collections.Sorted.SelfSorted`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Sorted.SelfSorted`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Sorted.SelfSorted`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Sorted.SelfSorted`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Sorted.SelfSorted`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Sorted.SelfSorted`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:ChartTools.Collections.Unique.UniqueEnumerable`1">
            <summary>
            Enumerable where <typeparamref name="T"/> items are pulled from multiple enumerables and filtered to the ones considered unique by an <see cref="T:ChartTools.SystemExtensions.EqualityComparison`1"/>
            </summary>
            <typeparam name="T">Type of the enumerated items</typeparam>
        </member>
        <member name="P:ChartTools.Collections.Unique.UniqueEnumerable`1.Enumerables">
            <summary>
            Enumerables to pull items from
            </summary>
        </member>
        <member name="P:ChartTools.Collections.Unique.UniqueEnumerable`1.Comparison">
            <summary>
            Function that determines if two items are the same
            </summary>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueEnumerable`1.#ctor(ChartTools.SystemExtensions.EqualityComparison{`0},System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            Creates an instance of <see cref="T:ChartTools.Collections.Unique.UniqueEnumerable`1"/>.
            </summary>
            <param name="comparison">Function that determines if two items are the same</param>
            <param name="enumerables">Enumerables to pull items from</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueEnumerable`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:ChartTools.Collections.Unique.UniqueEnumerator`1">
            <summary>
            Enumerator where <typeparamref name="T"/> items are pulled from multiple enumerators and filtered to the ones considered unique by an <see cref="T:ChartTools.SystemExtensions.EqualityComparison`1"/>
            </summary>
            <typeparam name="T">Type of the enumerated items</typeparam>
        </member>
        <member name="F:ChartTools.Collections.Unique.UniqueEnumerator`1.returnedItems">
            <summary>
            Items that have previously been iterated, used for checking if a new item is unique
            </summary>
        </member>
        <member name="P:ChartTools.Collections.Unique.UniqueEnumerator`1.Enumerators">
            <summary>
            Enumerators to pull items from
            </summary>
        </member>
        <member name="F:ChartTools.Collections.Unique.UniqueEnumerator`1.endsReached">
            <summary>
            <see langword="true"/> for indexes where MoveNext previously returned <see langword="false"/>
            </summary>
        </member>
        <member name="P:ChartTools.Collections.Unique.UniqueEnumerator`1.Comparison">
            <summary>
            Function that determines if two items are the same
            </summary>
        </member>
        <member name="P:ChartTools.Collections.Unique.UniqueEnumerator`1.Current">
            <inheritdoc/>
        </member>
        <member name="P:ChartTools.Collections.Unique.UniqueEnumerator`1.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="P:ChartTools.Collections.Unique.UniqueEnumerator`1.Initialized">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueEnumerator`1.#ctor(ChartTools.SystemExtensions.EqualityComparison{`0},System.Collections.Generic.IEnumerator{`0}[])">
            <summary>
            Creates an instance of <see cref="T:ChartTools.Collections.Unique.UniqueEnumerator`1"/>.
            </summary>
            <param name="comparison">Function that determines if two items are the same</param>
            <param name="enumerators">Enumerators to pull items from</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueEnumerator`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueEnumerator`1.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueEnumerator`1.Reset">
            <inheritdoc/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ChartTools.Collections.Unique.UniqueEnumerator`1.Initialize" -->
        <member name="T:ChartTools.Collections.Unique.UniqueList`1">
            <summary>
            List where all <typeparamref name="T"/> items must be unique using a given comparison
            </summary>
            <typeparam name="T">Type of the contained items</typeparam>
        </member>
        <member name="F:ChartTools.Collections.Unique.UniqueList`1.items">
            <summary>
            Source of items
            </summary>
        </member>
        <member name="P:ChartTools.Collections.Unique.UniqueList`1.Comparison">
            <summary>
            Method that defines uniqueness of items
            </summary>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueList`1.#ctor(ChartTools.SystemExtensions.EqualityComparison{`0},System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates an instance of <see cref="T:ChartTools.Collections.Unique.UniqueList`1"/> using a comparison to define the uniqueness of items.
            </summary>
            <param name="comparison">Method that defines uniqueness of items</param>
            <param name="capacity">Number of items that the <see cref="T:ChartTools.Collections.Unique.UniqueList`1"/> can initially store</param>
        </member>
        <member name="P:ChartTools.Collections.Unique.UniqueList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ChartTools.Collections.Unique.UniqueList`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueList`1.Add(`0)">
            <summary>
            Adds an item to the list and overwrites any duplicate.
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple items to the <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
            <param name="collection">Items to add</param>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueList`1.RemoveDuplicate(`0)">
            <summary>
            Removes the first duplicate of a given item.
            </summary>
            <param name="item">Item to remove the duplicate of</param>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueList`1.RemoveDuplicates(System.Collections.Generic.List{`0})">
            <summary>
            Removes the first duplicate of multiple items
            </summary>
            <param name="item">Items to remove the duplicate of</param>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueList`1.GetEnumerator">
            <inheritdoc/>>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueList`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:ChartTools.Collections.Unique.UniqueListEquatable`1">
            <summary>
            List where all <typeparamref name="T"/> items must be unique using the default <see cref="T:System.IEquatable`1"/> comparison to determine uniqueness
            </summary>
            <typeparam name="T">Type of the contained items</typeparam>
        </member>
        <member name="M:ChartTools.Collections.Unique.UniqueListEquatable`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates an instance of <see cref="T:ChartTools.Collections.Unique.UniqueListEquatable`1"/>.
            </summary>
            <param name="capacity">Number of items that the <see cref="T:ChartTools.Collections.Unique.UniqueListEquatable`1"/> can initially store</param>
        </member>
        <member name="T:ChartTools.Collections.IInitializable">
            <summary>
            Defines an object that can be initialized
            </summary>
        </member>
        <member name="P:ChartTools.Collections.IInitializable.Initialized">
            <summary>
            Has already been initialized
            </summary>
        </member>
        <member name="M:ChartTools.Collections.IInitializable.Initialize">
            <summary>
            Does required initialization if not already done.
            </summary>
            <returns><see langword="true"/> if the object was not initialized prior to calling.</returns>
        </member>
        <member name="T:ChartTools.SystemExtensions.EqualityComparison`1">
            <summary>
            <see cref="T:System.IEquatable`1"/> equivalent to the <see cref="T:System.IComparable`1"/> <see cref="T:System.Comparison`1"/> delegate
            </summary>
        </member>
        <member name="T:ChartTools.SystemExtensions.StringExtensions">
            <summary>
            Provides additional methods to string
            </summary>
        </member>
        <member name="M:ChartTools.SystemExtensions.StringExtensions.VerbalEnumerate(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <inheritdoc cref="M:ChartTools.SystemExtensions.StringExtensions.VerbalEnumerate(System.String,System.String[])"/>
        </member>
        <member name="M:ChartTools.SystemExtensions.StringExtensions.VerbalEnumerate(System.String,System.String[])">
            <summary>
            Enumerates items with commas and a set word preceding the last item.
            </summary>
            <param name="lastItemPreceder">Word to place before the last item</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:ChartTools.SystemExtensions.Linq.LinqExtensions">
            <summary>
            Provides additional methods to Linq
            </summary>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0,System.Boolean@)">
            <inheritdoc cref="M:ChartTools.SystemExtensions.Linq.LinqExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0)"/>
            <param name="returnedDefault"><see langword="true"/> if no items meeting the condition were found</param>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.NonNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Excludes <see langword="null"/> items.
            </summary>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)">
            <summary>
            Tries to get the first item that meet a condition from en enumerable.
            </summary>
            <param name="predicate">Method that returns <see langword="true"/> if a given item meets the condition</param>
            <param name="item">Found item</param>
            <returns><see langword="true"/> if an item was found</returns>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},ChartTools.SystemExtensions.EqualityComparison{``0})">
            <summary>
            Returns distinct elements of a sequence using a method to determine the equality of elements
            </summary>
            <param name="comparison">Method that determines if two elements are the same</param>
            <inheritdoc cref="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" path="/exception"/>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.Replace``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0)">
            <summary>
            Replaces items that meet a condition with another item.
            </summary>
            <param name="source">The IEnumerable&lt;out T&gt; to replace the items of</param>
            <param name="predicate">A function that determines if an item must be replaced</param>
            <param name="replacement">The item to replace items with</param>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.ReplaceSection``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Predicate{``0},System.Boolean)">
            <summary>
            Replaces a section with other items.
            </summary>
            <remarks>Items that match startReplace or endReplace are not included in the returned items.</remarks>
            <param name="source">Items to replace a section in</param>
            <param name="replacement">Items to replace the section with</param>
            <param name="startReplace">Function that determines if an item if the first to be replaced</param>
            <param name="endReplace">Function that determines where to stop excluding items from the source</param>
            <param name="addIfMissing">Add the replacement to the end of the items if startReplace is never met</param>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.ReplaceSections``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.ValueTuple{System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Predicate{``0}}[])">
            <summary>
            Replaces multiple sections of items.
            </summary>
            <remarks>Items that match startReplace or endReplace are not included in the returned items.</remarks>
            <param name="source">Items to replace sections in</param>
            <param name="addIfMissing">Add the replacement to the end of the items if startReplace is never met</param>
            <param name="replacements">Array of tuples containing the items to replace the section and functions that determine the start and end of the replacement. Each tuple represents a section to replace</param>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.RemoveSection``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Predicate{``0})">
            <summary>
            Removes a section of items.
            </summary>
            <remarks>Items that match startRemove or endRemove</remarks>
            <param name="source">Source items to remove a section of</param>
            <param name="startRemove">Function that determines the start of the section to replace</param>
            <param name="endRemove">Function that determines the end of the section to replace</param>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.RemoveSections``1(System.Collections.Generic.IEnumerable{``0},System.ValueTuple{System.Predicate{``0},System.Predicate{``0}}[])">
            <summary>
            Removes multiple sections of items.
            </summary>
            <remarks>Items that match startRemove or endRemove</remarks>
            <param name="source">Source items to remove a section of</param>
            <param name="startRemove">Function that determines the start of the section to replace</param>
            <param name="endRemove">Function that determines the end of the section to replace</param>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.RelativeLoop``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Loops through a set of objects and returns a set of tuples containing the current object and the previous one.
            </summary>
            <param name="source">Items to loop through</param>
            <param name="firstPrevious">Value of the previous item in the first call of the action</param>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.RemoveWhere``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            Removes all items in a <see cref="T:System.Collections.Generic.ICollection`1"/> that meet a condition
            </summary>
            <param name="source">Collection to remove items from</param>
            <param name="predicate">Function that determines which items to remove</param>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.ManyMinMaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``1,System.Boolean})">
            <summary>
            Finds the items for which a function returns the smallest or greatest value based on a comparison.
            </summary>
            <param name="source">Items to find the minimum or maximum of</param>
            <param name="selector">Function that gets the key to use in the comparison from an item</param>
            <param name="comparison">Function that returns <see langword="true"/> if the second item defeats the first</param>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.ManyMinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Finds the items for which a function returns the smallest value.
            </summary>
            <param name="source">Items to find the minimum or maximum of</param>
            <param name="selector">Function that gets the key to use in the comparison from an item</param>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.ManyMaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Finds the items for which a function returns the greatest value.
            </summary>
            <param name="source">Items to find the minimum or maximum of</param>
            <param name="selector">Function that gets the key to use in the comparison from an item</param>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0)">
            <inheritdoc cref="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
            <param name="defaultValue">Value to return if no item meets the condition</param>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.MinMaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``1,System.Boolean})">
            <summary>
            Finds the item for which a function returns the smallest or greatest value based on a comparison.
            </summary>
            <param name="source">Items to find the minimum or maximum of</param>
            <param name="selector">Function that gets the key to use in the comparison from an item</param>
            <param name="comparison">Function that returns <see langword="true"/> if the second item defeats the first</param>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Finds the item for which a function returns the smallest value.
            </summary>
            <remarks>If the smallest value is obtained from multiple items, the first item to do so will be returned.</remarks>
            <param name="source">Items to find the minimum or maximum of</param>
            <param name="selector">Function that gets the key to use in the comparison from an item</param>
        </member>
        <member name="M:ChartTools.SystemExtensions.Linq.LinqExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Finds the item for which a function returns the greatest value.
            </summary>
            <remarks>If the greatest value is obtained from multiple items, the first item to do so will be returned.</remarks>
            <param name="source">Items to find the minimum or maximum of</param>
            <param name="selector">Function that gets the key to use in the comparison from an item</param>
        </member>
        <member name="T:ChartTools.InstrumentExtensions">
            <summary>
            Provides additional methods to <see cref="T:ChartTools.Instrument`1"/>
            </summary>
        </member>
        <member name="M:ChartTools.InstrumentExtensions.ReadDifficulty(ChartTools.Instrument{ChartTools.DrumsChord},System.String)">
            <summary>
            Reads <see cref="P:ChartTools.Instrument.Difficulty"/> from a file.
            </summary>
            <param name="inst">Instrument to the <see cref="P:ChartTools.Instrument.Difficulty"/> property of</param>
            <param name="path">Path of the file to read the difficulty from</param>
        </member>
        <member name="M:ChartTools.InstrumentExtensions.ReadDifficulty(ChartTools.Instrument{ChartTools.GHLChord},System.String,ChartTools.GHLInstrument)">
            <inheritdoc cref="M:ChartTools.InstrumentExtensions.ReadDifficulty(ChartTools.Instrument{ChartTools.DrumsChord},System.String)"/>
            <param name="instrument">Instrument to read the difficulty of</param>
        </member>
        <member name="M:ChartTools.InstrumentExtensions.ReadDifficulty(ChartTools.Instrument{ChartTools.StandardChord},System.String,ChartTools.StandardInstrument)">
            <inheritdoc cref="!:ReadDifficulty(Instrument&lt;GHLChord&gt;, string)"/>
        </member>
        <member name="M:ChartTools.InstrumentExtensions.WriteDifficulty(ChartTools.Instrument{ChartTools.DrumsChord},System.String)">
            <summary>
            Writes <see cref="P:ChartTools.Instrument.Difficulty"/> to a file.
            </summary>
            <inheritdoc cref="M:ChartTools.Instrument.WriteDifficulty(System.String,ChartTools.Instruments,System.SByte)"/>
        </member>
        <member name="M:ChartTools.InstrumentExtensions.WriteDifficulty(ChartTools.Instrument{ChartTools.GHLChord},System.String,ChartTools.GHLInstrument)">
            <inheritdoc cref="M:ChartTools.InstrumentExtensions.WriteDifficulty(ChartTools.Instrument{ChartTools.DrumsChord},System.String)"/>
            <param name="instrument">Instrument to assign the difficulty to</param>
        </member>
        <member name="M:ChartTools.InstrumentExtensions.WriteDifficulty(ChartTools.Instrument{ChartTools.StandardChord},System.String,ChartTools.StandardInstrument)">
            <inheritdoc cref="M:ChartTools.InstrumentExtensions.WriteDifficulty(ChartTools.Instrument{ChartTools.DrumsChord},System.String)"/>
            <inheritdoc cref="M:ChartTools.InstrumentExtensions.WriteDifficulty(ChartTools.Instrument{ChartTools.GHLChord},System.String,ChartTools.GHLInstrument)" path="param"/>
        </member>
        <member name="M:ChartTools.InstrumentExtensions.ToFile(ChartTools.Instrument{ChartTools.DrumsChord},System.String,ChartTools.IO.WritingConfiguration)">
            <summary>
            Replaces drums in a file.
            </summary>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReplaceDrums(System.String,ChartTools.Instrument{ChartTools.DrumsChord},ChartTools.IO.WritingConfiguration)" path="/param"/>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReplaceDrums(System.String,ChartTools.Instrument{ChartTools.DrumsChord},ChartTools.IO.WritingConfiguration)" path="/exception"/>
            <inheritdoc cref="!:ExtensionHandler.Write&lt;T, TConfig&gt;(string, T, TConfig, (string extension, Action&lt;string, T, TConfig&gt; writeMethod)[])" path="/exception"/>
        </member>
        <member name="M:ChartTools.InstrumentExtensions.ToFile(ChartTools.Instrument{ChartTools.GHLChord},System.String,ChartTools.GHLInstrument,ChartTools.IO.WritingConfiguration)">
            <inheritdoc cref="!:ChartParser.ReplaceInstrument(string, (Instrument&lt;GHLChord&gt; inst, GHLInstrument instEnum), WritingConfiguration)" path="param"/>
            <inheritdoc cref="!:ChartParser.ReplaceInstrument(string, (Instrument&lt;GHLChord&gt; inst, GHLInstrument instEnum), WritingConfiguration)" path="exception"/>
            <param name="instrument">Instrument to assign the data to</param>
        </member>
        <member name="M:ChartTools.InstrumentExtensions.ToFile(ChartTools.Instrument{ChartTools.StandardChord},System.String,ChartTools.StandardInstrument,ChartTools.IO.WritingConfiguration)">
            <inheritdoc cref="!:ToFile(Instrument&lt;GHLChord&gt;, string)"/>
        </member>
        <member name="T:ChartTools.CommonExceptions">
            <summary>
            Provides templates for commonly thrown exceptions
            </summary>
        </member>
        <member name="T:ChartTools.CommonExceptions.ParameterNullException">
            <summary>
            The exception that is thrown when a method is called with <see langword="null"/> as a parameter for which <see langword="null"/> is not an accepted value
            </summary>
        </member>
        <member name="F:ChartTools.CommonExceptions.ParameterNullException.DefaultTemplate">
            <summary>
            Default value of <see cref="P:ChartTools.CommonExceptions.ParameterNullException.MessageTemplate"/>
            </summary>
        </member>
        <member name="P:ChartTools.CommonExceptions.ParameterNullException.MessageTemplate">
            <summary>
            Format of the message where "{position}" and "{name}" will be replaced by the respective values.
            </summary>
        </member>
        <member name="P:ChartTools.CommonExceptions.ParameterNullException.ParameterPosition">
            <summary>
            Zero-based position of the parameter in the method signature
            </summary>
        </member>
        <member name="P:ChartTools.CommonExceptions.ParameterNullException.ParameterName">
            <summary>
            Name of the parameter in the method signature
            </summary>
        </member>
        <member name="M:ChartTools.CommonExceptions.ParameterNullException.#ctor(System.String,System.Byte)">
            <summary>
            Creates an instance of <see cref="T:ChartTools.CommonExceptions.ParameterNullException"/> using the previously defined template.
            </summary>
        </member>
        <member name="M:ChartTools.CommonExceptions.ParameterNullException.#ctor(System.String,System.Byte,System.String)">
            <summary>
            Creates an instance of <see cref="T:ChartTools.CommonExceptions.ParameterNullException"/> using a single-use template.
            </summary>
        </member>
        <member name="T:ChartTools.TrackExtensions">
            <summary>
            Provides additional methods to <see cref="T:ChartTools.Track`1"/>
            </summary>
        </member>
        <member name="M:ChartTools.TrackExtensions.ToFile(ChartTools.Track{ChartTools.DrumsChord},System.String,ChartTools.Difficulty,ChartTools.IO.WritingConfiguration)">
            <summary>
            Writes the <see cref="T:ChartTools.Track`1"/> to a file.
            </summary>
            <param name="path">Path of the file to write to</param>
            <param name="difficulty">Difficulty to assign the <see cref="T:ChartTools.Track"/> to</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Security.SecurityException"/>
        </member>
        <member name="M:ChartTools.TrackExtensions.ToFile(ChartTools.Track{ChartTools.GHLChord},System.String,ChartTools.GHLInstrument,ChartTools.Difficulty,ChartTools.IO.WritingConfiguration)">
            <inheritdoc cref="!:ToFile(Track&lt;DrumsChord&gt;, string, Difficulty)"/>
            <param name="instrument">Instrument to assign the <see cref="T:ChartTools.Track`1"/> to</param>
        </member>
        <member name="M:ChartTools.TrackExtensions.ToFile(ChartTools.Track{ChartTools.StandardChord},System.String,ChartTools.StandardInstrument,ChartTools.Difficulty,ChartTools.IO.WritingConfiguration)">
            <inheritdoc cref="!:ToFile(Track&lt;GHLChord&gt;, string, Difficulty)"/>
        </member>
        <member name="T:ChartTools.EventExtensions">
            <summary>
            Provides additional methods to <see cref="T:ChartTools.Event"/>
            </summary>
        </member>
        <member name="M:ChartTools.EventExtensions.ToFile(System.Collections.Generic.IEnumerable{ChartTools.GlobalEvent},System.String,ChartTools.IO.WritingConfiguration)">
            <summary>
            Writes the global events to a file
            </summary>
            <param name="events">Events to write</param>
            <param name="path">Path of the file to write</param>
        </member>
        <member name="T:ChartTools.GlobalEventExtensions">
            <summary>
            Provides additional methods for <see cref="T:ChartTools.GlobalEvent"/>
            </summary>
        </member>
        <member name="M:ChartTools.GlobalEventExtensions.GetLyrics(System.Collections.Generic.IEnumerable{ChartTools.GlobalEvent})">
            <summary>
            Gets the lyrics from an enumerable of <see cref="T:ChartTools.GlobalEvent"/>
            </summary>
            <returns>Enumerable of <see cref="T:ChartTools.Lyrics.Phrase"/></returns>
        </member>
        <member name="M:ChartTools.GlobalEventExtensions.SetLyrics(System.Collections.Generic.IEnumerable{ChartTools.GlobalEvent},System.Collections.Generic.IEnumerable{ChartTools.Lyrics.Phrase})">
            <summary>
            Gets a set of <see cref="T:ChartTools.GlobalEvent"/> where phrase and lyric events are replaced with the events making up a set of <see cref="T:ChartTools.Lyrics.Phrase"/>.
            </summary>
            <returns>Enumerable of <see cref="T:ChartTools.GlobalEvent"/></returns>
        </member>
        <member name="T:ChartTools.FuncEqualityComparer`1">
            <summary>
            Delegate-based <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
            </summary>
        </member>
        <member name="P:ChartTools.FuncEqualityComparer`1.Comparison">
            <summary>
            Method used to compare two objects
            </summary>
        </member>
        <member name="M:ChartTools.FuncEqualityComparer`1.#ctor(ChartTools.SystemExtensions.EqualityComparison{`0})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="comparison">Method used to compare two objects</param>
        </member>
        <member name="T:ChartTools.InternalTools.ProperyMerger">
            <summary>
            Provides methods to merge properties between two instances
            </summary>
        </member>
        <member name="M:ChartTools.InternalTools.ProperyMerger.Merge``1(``0,System.Boolean,``0[])">
            <summary>
            Replaces the property values of an instance with the first non-null equivalent from other instances.
            </summary>
            <remarks>If overwriteNonNull is <see langword="false"/>, only replaces property values that are null in the original instance.</remarks>
            <param name="current">Item to assign the property values to</param>
            <param name="overwriteNonNull">If <see langword="false"/>, only replaces property values that are null in the original instance.</param>
            <param name="newValues">Items to pull new property values from in order of priority</param>
        </member>
        <member name="T:ChartTools.IO.Chart.ChartParser">
            <summary>
            Provides methods for reading chart files
            </summary>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.GetNewEntryException">
            <summary>
            Gets the <see cref="T:System.Exception"/> to throw from an entry.
            </summary>
        </member>
        <member name="F:ChartTools.IO.Chart.ChartParser.instrumentHeaderNames">
            <summary>
            Part names of <see cref="T:ChartTools.Instruments"/> without the difficulty
            </summary>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.GetFullPartName(ChartTools.Instruments,ChartTools.Difficulty)">
            <summary>
            Gets the full part name for a track.
            </summary>
            <exception cref="T:System.ArgumentException"/>
            <param name="instrument">Instrument to include in the part name</param>
            <param name="difficulty">Difficulty to include in the part name</param>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReadSongAsync(System.String,ChartTools.IO.ReadingConfiguration,System.Threading.CancellationToken)">
            <summary>
            Reads a chart file asynchronously using threads to parse parts.
            </summary>
            <returns>Instance of <see cref="T:ChartTools.Song"/> containing all song data</returns>
            <param name="path">Path of the file to read</param>
            <inheritdoc cref="!:ReadFileAsync(string)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReadInstrument(System.String,ChartTools.Instruments,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads an instrument from a chart file.
            </summary>
            <returns>Instance of <see cref="T:ChartTools.Instrument"/> containing all data about the given instrument
                <para><see langword="null"/> if the file contains no data for the given instrument</para>
            </returns>
            <param name="path">Path of the file to read</param>
            <param name="instrument">Instrument to read</param>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReadDrums(System.String,ChartTools.IO.ReadingConfiguration)" path="/exception"/>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReadInstrument(System.String,ChartTools.GHLInstrument,ChartTools.IO.ReadingConfiguration)" path="/exception"/>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReadInstrument(System.String,ChartTools.StandardInstrument,ChartTools.IO.ReadingConfiguration)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReadDrums(System.String,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads drums from a chart file.
            </summary>
            <returns>Instance of <see cref="T:ChartTools.Instrument`1"/> where TChord is <see cref="T:ChartTools.DrumsChord"/> containing all drums data
                <para><see langword="null"/> if the file contains no drums data</para>
            </returns>
            <param name="path">Path of the file to read</param>
            <inheritdoc cref="!:ReadFileAsync(string)" path="/exception"/>
            <inheritdoc cref="!:GetDrumsTrack(IEnumerable&lt;string&gt;, ReadingConfiguration)(IEnumerable&lt;string&gt;, ReadingConfiguration)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReadInstrument(System.String,ChartTools.GHLInstrument,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads a Guitar Hero Live instrument from a chart file.
            </summary>
            <returns>Instance of <see cref="T:ChartTools.Instrument`1"/> where TChord is <see cref="T:ChartTools.GHLChord"/> containing all data about the given instrument
                <para><see langword="null"/> if the file has no data for the given instrument</para>
            </returns>
            <param name="path">Path of the file to read</param>
            <inheritdoc cref="!:ReadFileAsync(string)" path="/exception"/>
            <inheritdoc cref="!:GetGHLTrack(IEnumerable&lt;string&gt;, ReadingConfiguration)(IEnumerable&lt;string&gt;, ReadingConfiguration)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReadInstrument(System.String,ChartTools.StandardInstrument,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads a standard instrument from a chart file.
            </summary>
            <returns>Instance of <see cref="T:ChartTools.Instrument`1"/> where TChord is <see cref="T:ChartTools.StandardChord"/> containing all data about the given instrument
                <para><see langword="null"/> if the file contains no data for the given instrument</para>
            </returns>
            <param name="path">Path of the file to read</param>
            <param name="instrument">Instrument to read</param>
            <inheritdoc cref="!:ReadFileAsync(string)" path="/exception"/>
            <inheritdoc cref="!:GetStandardTrack(IEnumerable&lt;string&gt;, ReadingConfiguration)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReadTrack(System.String,ChartTools.Instruments,ChartTools.Difficulty,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads a track from a chart file.
            </summary>
            <returns>Instance of <see cref="T:ChartTools.Track"/> containing all data about the given track
                <para><see langword="null"/> if the file contains no data for the given track</para>
            </returns>
            <param name="path">Path of the file to read</param>
            <param name="instrument">Instrument of the track to read</param>
            <param name="difficulty">Difficulty of the track to read</param>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReadDrumsTrack(System.String,ChartTools.Difficulty,ChartTools.IO.ReadingConfiguration)" path="/exception"/>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReadTrack(System.String,ChartTools.GHLInstrument,ChartTools.Difficulty,ChartTools.IO.ReadingConfiguration)" path="/exception"/>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReadTrack(System.String,ChartTools.StandardInstrument,ChartTools.Difficulty,ChartTools.IO.ReadingConfiguration)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReadDrumsTrack(System.String,ChartTools.Difficulty,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads a drums track from a chart file.
            </summary>
            <returns>Instance of <see cref="T:ChartTools.Track`1"/> where TChors is <see cref="T:ChartTools.DrumsChord"/> containing all drums data for the given difficulty
                <para><see langword="null"/> if the file contains no drums data for the given difficulty</para>
            </returns>
            <param name="path">Path of the file to read</param>
            <param name="difficulty">Difficulty of the track to read</param>
            <inheritdoc cref="!:GetDrumsTrack(IEnumerable&lt;string&gt;, Difficulty, ReadingConfiguration), GHLInstrument, Difficulty, ReadingConfiguration)" path="/exception"/>
            <inheritdoc cref="!:GetPart(IEnumerable&lt;string&gt;, string)" path="/exception"/>
            <inheritdoc cref="!:GetFullPartName(Instruments, Difficulty)(IEnumerable&lt;string&gt;, string)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReadTrack(System.String,ChartTools.GHLInstrument,ChartTools.Difficulty,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads a Guitar Hero Live track from a chart file.
            </summary>
            <returns>Instance of <see cref="T:ChartTools.Track`1"/> where TChors is <see cref="T:ChartTools.GHLChord"/> containing all data for the given instrument and difficulty
                <para><see langword="null"/> if the file contains no data for the given instrument and difficulty</para>
            </returns>
            <param name="path">Path of the file to read</param>
            <param name="instrument">Instrument of the track</param>
            <param name="difficulty">Difficulty of the track</param>
            <inheritdoc cref="!:GetGHLTrack(IEnumerable&lt;string&gt;, GHLInstrument, Difficulty, ReadingConfiguration)" path="/exception"/>
            <inheritdoc cref="!:GetPart(IEnumerable&lt;string&gt;, string)" path="/exception"/>
            <inheritdoc cref="!:GetFullPartName(Instruments, Difficulty)(IEnumerable&lt;string&gt;, string)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReadTrack(System.String,ChartTools.StandardInstrument,ChartTools.Difficulty,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads a standard track from a chart file.
            </summary>
            <returns>Instance of <see cref="T:ChartTools.Track`1"/> where TChors is <see cref="T:ChartTools.StandardChord"/> containing all drums data for the given instrument and difficulty
                <para><see langword="null"/> if the file contains no data for the given instrument and difficulty</para>
            </returns>
            <param name="path">Path of the file to read</param>
            <param name="instrument">Instrument of the track</param>
            <param name="difficulty">Difficulty of the track</param>
            <inheritdoc cref="!:GetStandardTrack(IEnumerable&lt;string&gt;, StandardInstrument, Difficulty, ReadingConfiguration)"/>
            <inheritdoc cref="!:ReadFileAsync(string)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReadMetadata(System.String)">
            <summary>
            Reads the metadata from a chart file.
            </summary>
            <returns>Instance of <see cref="T:ChartTools.Metadata"/> containing metadata from the file
                <para>Null if the file contains no metadata</para>
            </returns>
            <param name="path">Path of the file to read</param>
            <inheritdoc cref="!:GetMetadata(string[])" path="/exception"/>
            <inheritdoc cref="!:ReadFileAsync(string)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReadGlobalEvents(System.String)">
            <summary>
            Reads the global events from a chart file.
            </summary>
            <returns>Enumerable of <see cref="T:ChartTools.GlobalEvent"/></returns>
            <param name="path">Path of the file the read</param>
            <inheritdoc cref="!:GetGlobalEvents(string[])" path="/exception"/>
            <inheritdoc cref="!:ReadFileAsync(string)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReadLyrics(System.String)">
            <summary>
            Reads the lyrics from a chart file.
            </summary>
            <returns>Enumerable of <see cref="T:ChartTools.Lyrics.Phrase"/> containing the lyrics from the file</returns>
            <param name="path">Path of the file to read</param>
            <inheritdoc cref="!:ReadGlobalEvents(string)(string[])" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReadSyncTrack(System.String,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads the sync track from a chart file.
            </summary>
            <returns>Instance of <see cref="T:ChartTools.SyncTrack"/>
                <para><see langword="null"/> if the file contains no sync track</para>
            </returns>
            <param name="path">Path of the file to read</param>
            <inheritdoc cref="!:GetSyncTrack(string[])" path="/exception"/>
            <inheritdoc cref="!:ReadFileAsync(string)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.GetDataSplit(System.String)">
            <summary>
            Splits the data of an entry.
            </summary>
            <param name="data">Data portion of a <see cref="!:TrackObjectEntry"/></param>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.GetLineException(System.String,System.Exception)">
            <summary>
            Generates an exception to throw when a line cannot be converted.
            </summary>
            <returns>Instance of <see cref="T:System.Exception"/> to throw</returns>
            <param name="line">Line that caused the exception</param>
            <param name="innerException">Exception caught when interpreting the line</param>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.WriteSong(System.String,ChartTools.Song,ChartTools.IO.WritingConfiguration)">
            <summary>
            Writes a song to a chart file
            </summary>
            <param name="path">Path of the file to write</param>
            <param name="song">Song to write</param>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReplacePart(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReplaceDrums(System.String,ChartTools.Instrument{ChartTools.DrumsChord},ChartTools.IO.WritingConfiguration)">
            <summary>Replaces drums in a chart file.</summary>
            <param name="path">Path of the file to write</param>
            <param name="inst">Instrument object to write</param>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReplaceInstrument``1(System.String,ChartTools.Instrument{``0},ChartTools.Instruments,ChartTools.IO.WritingConfiguration)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReplaceInstrument(System.String,System.ValueTuple{ChartTools.Instrument{ChartTools.GHLChord},ChartTools.GHLInstrument},ChartTools.IO.WritingConfiguration)">
            <summary>Replaces a GHL instrument in a chart file.</summary>
            <param name="path">Path of the file to write</param>
            <param name="data">Tuple containing the Instrument object to write and the instrument to assign it to</param>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReplaceInstrument``1(System.String,ChartTools.Instrument{``0},ChartTools.Instruments,ChartTools.IO.WritingConfiguration)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReplaceInstrument(System.String,System.ValueTuple{ChartTools.Instrument{ChartTools.StandardChord},ChartTools.StandardInstrument},ChartTools.IO.WritingConfiguration)">
            <summary>Replaces a standard instrument in a chart file.</summary>
            <param name="data">Tuple containing the Instrument object to write and the instrument to assign it to</param>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReplaceInstrument``1(System.String,ChartTools.Instrument{``0},ChartTools.Instruments,ChartTools.IO.WritingConfiguration)" path="/param"/>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReplaceInstrument``1(System.String,ChartTools.Instrument{``0},ChartTools.Instruments,ChartTools.IO.WritingConfiguration)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReplaceInstrument``1(System.String,ChartTools.Instrument{``0},ChartTools.Instruments,ChartTools.IO.WritingConfiguration)">
            <summary>
            Replaces an instrument in a file.
            </summary>
            <param name="path">Path of the file to write</param>
            <param name="inst">Instrument to use as a replacement</param>
            <param name="instEnum">Instrument to replace</param>
            <exception cref="T:System.ArgumentNullException"/>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReplacePart(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReplaceMetadata(System.String,ChartTools.Metadata)">
            <summary>
            Replaces the metadata in a file.
            </summary>
            <param name="path">Path of the file to read</param>
            <param name="metadata">Metadata to write</param>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReplacePart(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReplaceGlobalEvents(System.String,System.Collections.Generic.IEnumerable{ChartTools.GlobalEvent},ChartTools.IO.WritingConfiguration)">
            <summary>
            Replaces the global events in a file.
            </summary>
            <param name="path">Path of the file to write</param>
            <param name="events">Events to use as a replacement</param>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReplacePart(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReplaceSyncTrack(System.String,ChartTools.SyncTrack,ChartTools.IO.WritingConfiguration)">
            <summary>
            Replaces the sync track in a file.
            </summary>
            <param name="path">Path of the file to write</param>
            <param name="syncTrack">Sync track to write</param>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReplacePart(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReplaceTrack``1(System.String,System.ValueTuple{ChartTools.Track{``0},ChartTools.Instruments,ChartTools.Difficulty},ChartTools.IO.WritingConfiguration)">
            <summary>
            Replaces a track in a file.
            </summary>
            <param name="path">Path of the file to write</param>
            <param name="track">Track to use as a replacement</param>
            <param name="partName">Name of the part containing the track to replace</param>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReplacePart(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.ReplacePart(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Replaces a part in a file.
            </summary>
            <param name="path">Path of the file to write</param>
            <param name="partContent">Lines representing the entries in the part to use as a replacement</param>
            <param name="partName">Name of the part to replace</param>
            <inheritdoc cref="M:System.IO.File.WriteAllText(System.String,System.String)" path="/exception"/>
            <inheritdoc cref="!:ReadFileAsync(string)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.GetInstrumentLines``1(ChartTools.Instrument{``0},ChartTools.Instruments,ChartTools.IO.Chart.Sessions.WritingSession)">
            <summary>
            Gets the lines to write all the parts making up an instrument.
            </summary>
            <param name="instrument">Instrument to get the lines for</param>
            <param name="instEnum">Instrument to define the part names</param>
            <returns>Enumerable of all the lines making up the parts for the instrument</returns>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.GetTrackLines``1(ChartTools.Track{``0},ChartTools.IO.Chart.Sessions.WritingSession)">
            <summary>
            Gets the lines to write for a difficulty track.
            </summary>
            <returns>Enumerable of all the lines making up the inside of the part</returns>
            <param name="track">Track to get the lines of</param>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.GetMetadataLines(ChartTools.Metadata)">
            <summary>
            Gets the lines to write for metadata.
            </summary>
            <returns>Enumerable of all the lines</returns>
            <param name="metadata">Metadata to get the lines of</param>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.GetEventLine(ChartTools.Event)">
            <summary>
            Gets a line to write for an event.
            </summary>
            <param name="e">Event to get the line of</param>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.GetSyncTrackLines(ChartTools.SyncTrack,ChartTools.IO.Chart.Sessions.WritingSession)">
            <summary>
            Gets the lines to write for a sync track.
            </summary>
            <returns>Enumerable of all the lines</returns>
            <param name="syncTrack">Sync track to get the liens of</param>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.GetWrittenFloat(System.Single)">
            <summary>
            Gets the written value of a float.
            </summary>
            <param name="value">Value to get the written equivalent of</param>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.GetPartLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the lines to write for a part.
            </summary>
            <returns>Enumerable of all the lines</returns>
            <param name="partName">Name of the part to get the lines of</param>
            <param name="lines">Lines in the file</param>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.GetLine(System.String,System.String)">
            <summary>
            Gets a line to write from a header and value.
            </summary>
            <param name="header">Part of the line before the equal sign</param>
            <param name="value">Part of the line after the equal sign</param>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartParser.GetNoteData(System.Byte,System.UInt32)">
            <summary>
            Gets the written data for a note.
            </summary>
            <param name="index">Value of <see cref="P:ChartTools.Note.NoteIndex"/></param>
            <param name="sustain">Value of <see cref="P:ChartTools.Note.Length"/></param>
        </member>
        <member name="T:ChartTools.IO.Chart.Entries.ChartEntry">
            <summary>
            Line of chart file data
            </summary>
        </member>
        <member name="P:ChartTools.IO.Chart.Entries.ChartEntry.Header">
            <summary>
            Text before the equal sign
            </summary>
        </member>
        <member name="P:ChartTools.IO.Chart.Entries.ChartEntry.Data">
            <summary>
            Text after the equal sign
            </summary>
        </member>
        <member name="M:ChartTools.IO.Chart.Entries.ChartEntry.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:ChartTools.IO.Chart.Entries.ChartEntry"/>.
            </summary>
            <param name="line">Line in the file</param>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="T:ChartTools.IO.Chart.Entries.NoteData">
            <summary>
            Line of chart data representing a <see cref="T:ChartTools.Note"/>
            </summary>
        </member>
        <member name="P:ChartTools.IO.Chart.Entries.NoteData.NoteIndex">
            <summary>
            Value of <see cref="P:ChartTools.Note.NoteIndex"/>
            </summary>
        </member>
        <member name="P:ChartTools.IO.Chart.Entries.NoteData.SustainLength">
            <summary>
            Value of <see cref="P:ChartTools.Note.Length"/>
            </summary>
        </member>
        <member name="M:ChartTools.IO.Chart.Entries.NoteData.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:ChartTools.IO.Chart.Entries.NoteData"/>.
            </summary>
            <param name="data">Data section of the line in the file</param>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="T:ChartTools.IO.Chart.Entries.TrackObjectEntry">
            <summary>
            Line of chart file data representing a <see cref="T:ChartTools.TrackObject"/>
            </summary>
        </member>
        <member name="P:ChartTools.IO.Chart.Entries.TrackObjectEntry.Position">
            <summary>
            Value of <see cref="P:ChartTools.TrackObject.Position"/>
            </summary>
        </member>
        <member name="P:ChartTools.IO.Chart.Entries.TrackObjectEntry.Type">
            <summary>
            Type code of <see cref="T:ChartTools.TrackObject"/>
            </summary>
        </member>
        <member name="P:ChartTools.IO.Chart.Entries.TrackObjectEntry.Data">
            <summary>
            Additional data
            </summary>
        </member>
        <member name="M:ChartTools.IO.Chart.Entries.TrackObjectEntry.#ctor(System.String)">
            <summary>
            Creates an instance of see<see cref="T:ChartTools.IO.Chart.Entries.TrackObjectEntry"/>.
            </summary>
            <param name="line">Line in the file</param>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="T:ChartTools.IO.Chart.ChartReader">
            <summary>
            Reader of text file that sends read lines to subscribers of its events.
            </summary>
        </member>
        <member name="M:ChartTools.IO.Chart.ChartReader.ReadFileAsync">
            <summary>
            Enumerates the non-empty lines in the file.
            </summary>
        </member>
        <member name="T:ChartTools.IO.OverlappingStarPowerPolicy">
            <summary>
            Defines how overlapping star power phrases should be handled
            </summary>
        </member>
        <member name="F:ChartTools.IO.OverlappingStarPowerPolicy.Cut">
            <summary>
            The length of the phrase is cut short to the start of the next one
            </summary>
        </member>
        <member name="T:ChartTools.IO.TrackObjectSource">
            <summary>
            Difficulty of the <see cref="T:ChartTools.Track"/> to serve as a source of for track objects common to all difficulties to use for all tracks in the same <see cref="T:ChartTools.Instrument"/>
            <para>Common track objects are:<list type="bullet">
            <item>Local events</item>
            <item>Star power phrases</item>
            </list>
            </para>
            </summary>
            <remarks>Can be casted from <see cref="T:ChartTools.Difficulty"/>.</remarks>
        </member>
        <member name="F:ChartTools.IO.TrackObjectSource.Merge">
            <summary>
            Each <see cref="T:ChartTools.Track"/> will contain a combination of all unique common track objects in the same <see cref="T:ChartTools.Instrument"/>
            </summary>
        </member>
        <member name="T:ChartTools.IO.SoloNoStarPowerPolicy">
            <summary>
            Defines how to handle "solo" local events in tracks
            </summary>
        </member>
        <member name="F:ChartTools.IO.SoloNoStarPowerPolicy.Ignore">
            <summary>
            Local events are interpreted as is
            </summary>
        </member>
        <member name="F:ChartTools.IO.SoloNoStarPowerPolicy.Convert">
            <summary>
            If a track has "solo" or "soloend" local events and no star power, convert the events into star power as interpreted by Clone Hero
            </summary>
        </member>
        <member name="T:ChartTools.IO.DuplicateTrackObjectPolicy">
            <summary>
            Defines how duplicate track objects are handled
            </summary>
        </member>
        <member name="F:ChartTools.IO.DuplicateTrackObjectPolicy.IncludeFirst">
            <summary>
            Only include the first object
            </summary>
        </member>
        <member name="F:ChartTools.IO.DuplicateTrackObjectPolicy.IncludeAll">
            <summary>
            Include all objects
            </summary>
        </member>
        <member name="F:ChartTools.IO.DuplicateTrackObjectPolicy.ThrowException">
            <summary>
            Throw an exception
            </summary>
        </member>
        <member name="T:ChartTools.IO.HopoThresholdPriority">
            <summary>
            Hopo threshold to use if included in the metadata and configuration
            </summary>
        </member>
        <member name="F:ChartTools.IO.HopoThresholdPriority.Metadata">
            <summary>
            Get the threshold from metadata
            </summary>
        </member>
        <member name="F:ChartTools.IO.HopoThresholdPriority.Configuration">
            <summary>
            Get the threshold from configuration
            </summary>
        </member>
        <member name="T:ChartTools.IO.UnsupportedModifierPolicy">
            <summary>
            Defines how to handle chord modifiers not supported by the target format
            </summary>
        </member>
        <member name="F:ChartTools.IO.UnsupportedModifierPolicy.IgnoreModifier">
            <summary>
            The modifier is excluded
            </summary>
        </member>
        <member name="F:ChartTools.IO.UnsupportedModifierPolicy.IgnoreChord">
            <summary>
            The chord is excluded
            </summary>
        </member>
        <member name="F:ChartTools.IO.UnsupportedModifierPolicy.ThrowException">
            <summary>
            Throw an exception
            </summary>
        </member>
        <member name="T:ChartTools.IO.LyricEventSource">
            <summary>
            Where to get lyric data from for formats that store lyrics as events
            </summary>
        </member>
        <member name="F:ChartTools.IO.LyricEventSource.GlobalEvents">
            <summary>
            Lyrics are obtained from global events
            </summary>
        </member>
        <member name="F:ChartTools.IO.LyricEventSource.Vocals">
            <summary>
            Lyrics are obtained from the <see cref="P:ChartTools.Song.Vocals"/> instrument
            </summary>
        </member>
        <member name="P:ChartTools.IO.CommonConfiguration.OverlappingStarPowerPolicy">
            <inheritdoc cref="T:ChartTools.IO.OverlappingStarPowerPolicy"/>
        </member>
        <member name="P:ChartTools.IO.CommonConfiguration.SoloNoStarPowerPolicy">
            <inheritdoc cref="T:ChartTools.IO.SoloNoStarPowerPolicy"/>
        </member>
        <member name="P:ChartTools.IO.CommonConfiguration.DuplicateTrackObjectPolicy">
            <inheritdoc cref="T:ChartTools.IO.DuplicateTrackObjectPolicy"/>
        </member>
        <member name="T:ChartTools.IO.ReadingConfiguration">
            <summary>
            Configuration object to direct the reading of a file
            </summary>
        </member>
        <member name="P:ChartTools.IO.WritingConfiguration.EventSource">
            <summary>
            Defines which difficulty to get local events from
            </summary>
        </member>
        <member name="P:ChartTools.IO.WritingConfiguration.HopoThresholdPriority">
            <inheritdoc cref="T:ChartTools.IO.HopoThresholdPriority"/>
        </member>
        <member name="P:ChartTools.IO.WritingConfiguration.HopoTreshold">
            <inheritdoc cref="P:ChartTools.Metadata.HopoThreashold"/>
        </member>
        <member name="P:ChartTools.IO.WritingConfiguration.UnsupportedModifierPolicy">
            <see cref="T:ChartTools.IO.UnsupportedModifierPolicy"/>
        </member>
        <member name="P:ChartTools.IO.WritingConfiguration.LyricEventSource">
            <summary>
            *Currently unsupported*
            </summary>
        </member>
        <member name="T:ChartTools.IO.ExtensionHandler">
            <summary>
            Provides methods for reading and writing files based on the extension
            </summary>
        </member>
        <member name="M:ChartTools.IO.ExtensionHandler.Read(System.String,System.ValueTuple{System.String,System.Action{System.String}}[])">
            <summary>
            Reads a file using the method that matches the extension.
            </summary>
            <param name="path">Path of the file to read</param>
            <param name="readers">Array of tuples representing the supported extensions</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:ChartTools.IO.ExtensionHandler.Read``1(System.String,System.ValueTuple{System.String,System.Func{System.String,``0}}[])">
            <inheritdoc cref="M:ChartTools.IO.ExtensionHandler.Read``1(System.String,System.ValueTuple{System.String,System.Func{System.String,``0}}[])"/>
        </member>
        <member name="M:ChartTools.IO.ExtensionHandler.Read``2(System.String,``1,System.ValueTuple{System.String,System.Func{System.String,``1,``0}}[])">
            <inheritdoc cref="M:ChartTools.IO.ExtensionHandler.Read(System.String,System.ValueTuple{System.String,System.Action{System.String}}[])"/>
        </member>
        <member name="M:ChartTools.IO.ExtensionHandler.Write``1(System.String,``0,System.ValueTuple{System.String,System.Action{System.String,``0}}[])">
            <summary>
            Writes an object to a file using the method that matches the extension.
            </summary>
            <param name="path">Path of the file to write</param>
            <param name="item">Item to write</param>
            <param name="writers">Array of tupples representing the supported extensions</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:ChartTools.IO.ExtensionHandler.Write``2(System.String,``0,``1,System.ValueTuple{System.String,System.Action{System.String,``0,``1}}[])">
            <inheritdoc cref="!:Write&lt;T, TConfig&gt;(string, T, TConfig, (string extension, Action&lt;string, T, TConfig&gt; writeMethod)[])"/>
        </member>
        <member name="M:ChartTools.IO.ExtensionHandler.GetException(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the exception to throw if the extension has no method that handles it.
            </summary>
            <returns>Instance of <see cref="T:System.Exception"/> to throw</returns>
        </member>
        <member name="T:ChartTools.IO.Ini.IniParser">
            <summary>
            Provides methods for reading and writing ini files
            </summary>
        </member>
        <member name="F:ChartTools.IO.Ini.IniParser.difficultyKeys">
            <summary>
            Keys for <see cref="T:ChartTools.Instrument"/> difficulties
            </summary>
        </member>
        <member name="M:ChartTools.IO.Ini.IniParser.ReadMetadata(System.String)">
            <summary>
            Reads metadata from a ini file.
            </summary>
            <returns>Instance of <see cref="T:ChartTools.Metadata"/> containing the data in the file</returns>
            <param name="path">Path of the file to read</param>
            <inheritdoc cref="M:System.IO.File.ReadLines(System.String)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Ini.IniParser.WriteMetadata(System.String,ChartTools.Metadata)">
            <summary>
            Writes metadata to a ini file.
            </summary>
            <param name="path">Path of the file to read</param>
            <param name="metadata">Metadata to write</param>
        </member>
        <member name="M:ChartTools.IO.Ini.IniParser.ReadDifficulty(System.String,ChartTools.Instruments)">
            <summary>
            Reads an <see cref="T:ChartTools.Instrument"/> difficulty from a ini file.
            </summary>
            <returns>Difficulty read
                <para><see langword="null"/> if the file does not mention a difficulty for the provided instrument</para>
            </returns>
            <param name="path">Path of the file to read</param>
            <param name="instrument">Instrument to read</param>
            <inheritdoc cref="M:System.IO.File.ReadLines(System.String)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Ini.IniParser.ReadDifficulties(System.String,ChartTools.Song)">
            <summary>
            Reads <see cref="T:ChartTools.Instrument"/> difficulties from a ini file and assigns them to the instruments in a <see cref="T:ChartTools.Song"/>.
            </summary>
            <param name="path">Path of the file to read</param>
            <param name="song">Song to assign the difficulties to</param>
            <inheritdoc cref="M:System.IO.File.ReadAllLines(System.String)" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Ini.IniParser.WriteDifficulty(System.String,ChartTools.Instruments,System.SByte)">
            <summary>
            Writes an <see cref="T:ChartTools.Instrument"/> difficulty to a ini file.
            </summary>
            <param name="path">Path of the file to write</param>
            <param name="instrument">Instrument to write the difficulty of</param>
            <param name="value">Difficulty to write</param>
            <inheritdoc cref="M:System.IO.File.ReadAllLines(System.String)" path="/exception"/>
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})" path="/exception"/>
        </member>
        <member name="M:ChartTools.IO.Ini.IniParser.WriteDifficulties(System.String,ChartTools.Song)">
            <summary>
            Writes <see cref="T:ChartTools.Instrument"/> difficulties from a <see cref="T:ChartTools.Song"/> to a ini file.
            </summary>
            <param name="path">Path of the file to write</param>
            <param name="song">Song to get the difficulties from</param>
            <inheritdoc cref="M:ChartTools.IO.Ini.IniParser.WriteDifficulty(System.String,ChartTools.Instruments,System.SByte)" path="/exception"/>
        </member>
        <member name="T:ChartTools.IO.MIDI.MIDIParser">
            <summary>
            Provides methods for reading and writing MIDI files
            </summary>
        </member>
        <member name="F:ChartTools.IO.MIDI.MIDIParser.readingSettings">
            <summary>
            Parameter to use with MIDIFile.Read()
            </summary>
        </member>
        <member name="M:ChartTools.IO.MIDI.MIDIParser.ReadSong(System.String,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads a MIDI file.
            </summary>
            <param name="path">Path of the file to read</param>
            <param name="midiConfig">Parameters used to interpret the file</param>
        </member>
        <member name="M:ChartTools.IO.MIDI.MIDIParser.CheckTrackChunkPresence(Melanchall.DryWetMidi.Core.ChunksCollection,System.Exception@)">
            <summary>
            Checks if a <see cref="T:Melanchall.DryWetMidi.Core.ChunksCollection"/> contains any <see cref="T:Melanchall.DryWetMidi.Core.TrackChunk"/>.
            </summary>
            <param name="chunks">Chunks to check</param>
            <param name="ex">Exception to throw if returned <see langword="false"/></param>
            <returns><see langword="true"/> if the collection contains at least one <see cref="T:Melanchall.DryWetMidi.Core.TrackChunk"/></returns>
        </member>
        <member name="T:ChartTools.Metadata">
            <summary>
            Set of miscellaneous information about a <see cref="T:ChartTools.Song"/>
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.Title">
            <summary>
            Title of the <see cref="T:ChartTools.Song"/>
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.Artist">
            <summary>
            Artist or band behind the <see cref="T:ChartTools.Song"/>
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.Album">
            <summary>
            Album featuring the <see cref="T:ChartTools.Song"/>
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.AlbumTrack">
            <summary>
            Track number of the song within the album
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.PlaylistTrack">
            <summary>
            Track number of the song within the playlist/setlist
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.Year">
            <summary>
            Year of release
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.Genre">
            <summary>
            Genre of the <see cref="T:ChartTools.Song"/>
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.Charter">
            <summary>
            Creator of the chart
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.PreviewStart">
            <summary>
            Start time in milliseconds of the preview in the Clone Hero song browser
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.PreviewEnd">
            <summary>
            End time in milliseconds of the preview in the Clone Hero song browser
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.PreviewLength">
            <summary>
            Duration in milliseconds of the preview in the Clone Hero song browser
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.Difficulty">
            <summary>
            Overall difficulty of the song
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.MediaType">
            <summary>
            Type of media the audio track comes from
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.Resolution">
            <summary>
            Number of <see cref="P:ChartTools.TrackObject.Position"/> values per beat
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.AudioOffset">
            <summary>
            Offset of the audio track in milliseconds. A higher value makes the audio start sooner.
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.Streams">
            <summary>
            Paths of audio files
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.VideoOffset">
            <summary>
            Offset of the background video in milliseconds. A higher value makes the video start sooner.
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.Length">
            <summary>
            Length of the song in milliseconds
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.LoadingText">
            <summary>
            Text to be displayed on the load screen
            </summary>
        </member>
        <member name="P:ChartTools.Metadata.IsModchart">
            <summary>
            The song is a modchart
            </summary>
        </member>
        <member name="M:ChartTools.Metadata.FromFile(System.String)">
            <summary>
            Reads the metadata from a file.
            </summary>
            <param name="path">Path of the file to read</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.OutOfMemoryException"/>
        </member>
        <member name="M:ChartTools.Metadata.FromFiles(System.String[])">
            <summary>
            Reads the metadata from multiple files.
            </summary>
            <remarks>Each file has less priority than the preceding.</remarks>
            <param name="paths">Paths of the files to read</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.OutOfMemoryException"/>
        </member>
        <member name="M:ChartTools.Metadata.ToFile(System.String)">
            <inheritdoc cref="M:ChartTools.IO.Ini.IniParser.WriteMetadata(System.String,ChartTools.Metadata)"/>
        </member>
        <member name="T:ChartTools.Charter">
            <summary>
            Creator of the chart
            </summary>
        </member>
        <member name="P:ChartTools.Charter.Name">
            <summary>
            Name of the creator
            </summary>
        </member>
        <member name="P:ChartTools.Charter.Icon">
            <summary>
            Location of the image file to use as an icon in the Clone Hero song browser
            </summary>
        </member>
        <member name="T:ChartTools.StreamCollection">
            <summary>
            Set of audio files to play and mute during gameplay
            </summary>
            <remarks>Instrument audio may be muted when chords of the respective instrument are missed</remarks>
        </member>
        <member name="P:ChartTools.StreamCollection.Music">
            <summary>
            Location of the base audio file
            </summary>
        </member>
        <member name="P:ChartTools.StreamCollection.Guitar">
            <summary>
            Location of the guitar audio file
            </summary>
        </member>
        <member name="P:ChartTools.StreamCollection.Bass">
            <summary>
            Location of the bass audio
            </summary>
        </member>
        <member name="P:ChartTools.StreamCollection.Rhythm">
            <summary>
            Location of the rhythm guitar audio file
            </summary>
        </member>
        <member name="P:ChartTools.StreamCollection.Keys">
            <summary>
            Location of the keys audio file
            </summary>
        </member>
        <member name="P:ChartTools.StreamCollection.Drum">
            <summary>
            Location of the drums' kicks audio file
            </summary>
            <remarks>Can include all drums audio</remarks>
        </member>
        <member name="P:ChartTools.StreamCollection.Drum2">
            <summary>
            Location of the drums' snares audio file
            </summary>
            <remarks>Can include all drums audio except kicks</remarks>
        </member>
        <member name="P:ChartTools.StreamCollection.Drum3">
            <summary>
            Location of the drum's toms audio file
            </summary>
            <remarks>Can include toms and cymbals</remarks>
        </member>
        <member name="P:ChartTools.StreamCollection.Drum4">
            <summary>
            Location of the drum's cymbals audio file
            </summary>
        </member>
        <member name="P:ChartTools.StreamCollection.Vocal">
            <summary>
            Location of the vocals audio file
            </summary>
        </member>
        <member name="P:ChartTools.StreamCollection.Crowd">
            <summary>
            Location of the crowd reaction audio file
            </summary>
        </member>
        <member name="T:ChartTools.DrumsNote">
            <summary>
            Note played by drums
            </summary>
        </member>
        <member name="P:ChartTools.DrumsNote.IsCymbal">
            <summary>
            <see langword="true"/> if the cymbal must be hit instead of the pad on supported drum sets
            </summary>
            <remarks><see cref="F:ChartTools.DrumsLane.Green5Lane"/> notes cannot be cymbal.</remarks>
        </member>
        <member name="P:ChartTools.DrumsNote.IsKick">
            <summary>
            Determines if the note is played by kicking
            </summary>
        </member>
        <member name="T:ChartTools.Note">
            <summary>
            Base class for notes
            </summary>
        </member>
        <member name="P:ChartTools.Note.NoteIndex">
            <summary>
            Numerical value of the note as written in a chart file
            </summary>
        </member>
        <member name="P:ChartTools.Note.Length">
            <summary>
            Maximum length the note can be held for extra points
            </summary>
        </member>
        <member name="P:ChartTools.LaneNoteCollection`2.OpenExclusivity">
            <summary>
            If <see langword="true"/>, trying to combine an open note with other notes will remove the current ones.
            </summary>
        </member>
        <member name="M:ChartTools.LaneNoteCollection`2.Add(`0)">
            <summary>
            Adds a note to the <see cref="!:NoteCollection&lt;TNote&gt;"/>.
            </summary>
            <remarks>Adding a note that already exists will overwrite the existing note.
                <para>If <see cref="P:ChartTools.LaneNoteCollection`2.OpenExclusivity"/> is <see langword="true"/>, combining an open note with other notes will remove the current ones.</para>
            </remarks>
            <param name="item">Item to add</param>
        </member>
        <member name="T:ChartTools.NoteCollection`2">
            <summary>
            Set of notes played simultaneously
            </summary>
        </member>
        <member name="M:ChartTools.NoteCollection`2.Add(`0)">
            <summary>Adds a note to the collection.</summary>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ChartTools.NoteCollection`2.Contains(`0)" -->
        <member name="M:ChartTools.NoteCollection`2.Remove(`0)">
            <summary>
            Removes a note from the collection.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:ChartTools.NoteCollection`2.Item(`1)">
            <summary>
            Gets the note matching a lane.
            </summary>
        </member>
        <member name="T:ChartTools.Song">
            <summary>
            Song playable in Clone Hero
            </summary>
        </member>
        <member name="P:ChartTools.Song.Metadata">
            <summary>
            Set of information about the song not unrelated to instruments, syncing or events
            </summary>
        </member>
        <member name="P:ChartTools.Song.SyncTrack">
            <inheritdoc cref="T:ChartTools.SyncTrack"/>
        </member>
        <member name="P:ChartTools.Song.GlobalEvents">
            <summary>
            List of events common to all instruments
            </summary>
        </member>
        <member name="P:ChartTools.Song.Drums">
            <summary>
            Set of drums tracks
            </summary>
        </member>
        <member name="P:ChartTools.Song.GHLGuitar">
            <summary>
            Set of Guitar Hero Live guitar tracks
            </summary>
        </member>
        <member name="P:ChartTools.Song.GHLBass">
            <summary>
            Set of Guitar Hero Live bass tracks
            </summary>
        </member>
        <member name="P:ChartTools.Song.LeadGuitar">
            <summary>
            Set of lead guitar tracks
            </summary>
        </member>
        <member name="P:ChartTools.Song.RhythmGuitar">
            <summary>
            Set of rhythm guitar tracks
            </summary>
        </member>
        <member name="P:ChartTools.Song.CoopGuitar">
            <summary>
            Set of coop guitar tracks
            </summary>
        </member>
        <member name="P:ChartTools.Song.Bass">
            <summary>
            Set of bass tracks
            </summary>
        </member>
        <member name="P:ChartTools.Song.Keys">
            <summary>
            Set of keyboard tracks
            </summary>
        </member>
        <member name="M:ChartTools.Song.GetInstrument(ChartTools.Instruments)">
            <summary>
            Gets property value for an <see cref="T:ChartTools.Instrument"/> from a <see cref="T:ChartTools.Instruments"/> <see langword="enum"/> value.
            </summary>
            <returns>Instance of <see cref="T:ChartTools.Instrument"/> from the <see cref="T:ChartTools.Song"/></returns>
            <param name="instrument">Instrument to get</param>
        </member>
        <member name="M:ChartTools.Song.GetInstrument(ChartTools.GHLInstrument)">
            <summary>
            Gets property value for an <see cref="T:ChartTools.Instrument`1"/> from a <see cref="T:ChartTools.GHLInstrument"/> <see langword="enum"/> value.
            </summary>
            /// <param name="instrument">Instrument to get</param>
            <returns>Instance of <see cref="T:ChartTools.Instrument`1"/> where TChord is <see cref="T:ChartTools.GHLChord"/> from the <see cref="T:ChartTools.Song"/>.</returns>
        </member>
        <member name="M:ChartTools.Song.GetInstrument(ChartTools.StandardInstrument)">
            <summary>
            Gets property value for an <see cref="T:ChartTools.Instrument`1"/> from a <see cref="T:ChartTools.StandardInstrument"/> <see langword="enum"/> value.
            </summary>
            <param name="instrument">Instrument to get</param>
            <returns>Instance of <see cref="T:ChartTools.Instrument`1"/> where TChord is <see cref="T:ChartTools.StandardChord"/> from the <see cref="T:ChartTools.Song"/>.</returns>
        </member>
        <member name="M:ChartTools.Song.FromFile(System.String,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads a <see cref="T:ChartTools.Song"/> from a file.
            </summary>
            <remarks>Supported extensions: chart, ini (mid currently in development)</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.OutOfMemoryException"/>
            <exception cref="T:ChartTools.CommonExceptions.ParameterNullException"/>
        </member>
        <member name="M:ChartTools.Song.ToFile(System.String,ChartTools.IO.WritingConfiguration)">
            <summary>
            Writes the <see cref="T:ChartTools.Song"/> to a file.
            </summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Security.SecurityException"/>
        </member>
        <member name="M:ChartTools.Song.ReadDifficulties(System.String)">
            <summary>
            Reads the estimated instrument difficulties from a ini file.
            </summary>
            <param name="path">Path of the file to read</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.FormatException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:ChartTools.Song.WriteDifficulties(System.String)">
            <summary>
            Writes the estimated instrument difficulties to a ini file.
            </summary>
            <param name="path">Path of the file to write</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:ChartTools.Song.GetLyrics">
            <summary>
            Retrieves the lyrics from the global events.
            </summary>
        </member>
        <member name="M:ChartTools.Song.SetLyrics(System.Collections.Generic.IEnumerable{ChartTools.Lyrics.Phrase})">
            <summary>
            Replaces phrase and lyric events from <see cref="P:ChartTools.Song.GlobalEvents"/> with the ones making up a set of <see cref="T:ChartTools.Lyrics.Phrase"/>.
            </summary>
            <param name="phrases">Phrases to use as a replacement</param>
        </member>
        <member name="T:ChartTools.SyncTrack">
            <summary>
            Set of markers that define the time signature and tempo
            </summary>
        </member>
        <member name="P:ChartTools.SyncTrack.Tempo">
            <summary>
            Tempo markers
            </summary>
        </member>
        <member name="P:ChartTools.SyncTrack.TimeSignatures">
            <summary>
            Time signature markers
            </summary>
        </member>
        <member name="M:ChartTools.SyncTrack.FromFile(System.String,ChartTools.IO.ReadingConfiguration)">
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReadSyncTrack(System.String,ChartTools.IO.ReadingConfiguration)"/>
        </member>
        <member name="M:ChartTools.SyncTrack.ToFile(System.String,ChartTools.IO.WritingConfiguration)">
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReplaceSyncTrack(System.String,ChartTools.SyncTrack,ChartTools.IO.WritingConfiguration)"/>
        </member>
        <member name="T:ChartTools.Tempo">
            <summary>
            Marker that alters the tempo
            </summary>
        </member>
        <member name="P:ChartTools.Tempo.Value">
            <summary>
            New tempo
            </summary>
        </member>
        <member name="P:ChartTools.Tempo.Anchor">
            <summary>
            If not <see langword="null"/>, overrides <see cref="P:ChartTools.TrackObject.Position"/> with a time in seconds from the start of the song
            </summary>
        </member>
        <member name="M:ChartTools.Tempo.#ctor(System.UInt32,System.Single)">
            <summary>
            Creates an instance of <see cref="T:ChartTools.Tempo"/>.
            </summary>
        </member>
        <member name="T:ChartTools.TimeSignature">
            <summary>
            Marker that alters the time signature
            </summary>
        </member>
        <member name="P:ChartTools.TimeSignature.Numerator">
            <summary>
            Value of a beat
            </summary>
        </member>
        <member name="P:ChartTools.TimeSignature.Denominator">
            <summary>
            Beats per measure
            </summary>
        </member>
        <member name="M:ChartTools.TimeSignature.#ctor(System.UInt32,System.Byte,System.Byte)">
            <summary>
            Creates an instance of <see cref="T:ChartTools.TimeSignature"/>.
            </summary>
            <param name="position">Value of <see cref="P:ChartTools.TrackObject.Position"/></param>
            <param name="numerator">Value of <see cref="P:ChartTools.TimeSignature.Numerator"/></param>
            <param name="denominator">Value of <see cref="P:ChartTools.TimeSignature.Denominator"/></param>
        </member>
        <member name="T:ChartTools.Tools.Optimizing.Optimizer">
            <summary>
            Provides methods for simplifying songs
            </summary>
        </member>
        <member name="M:ChartTools.Tools.Optimizing.Optimizer.CutSustains(System.Collections.Generic.IEnumerable{ChartTools.Chord})">
            <summary>
            Cuts short sustains that exceed the position of the next identical note.
            </summary>
            <param name="chords">Chords to cut the sustains of</param>
        </member>
        <member name="M:ChartTools.Tools.Optimizing.Optimizer.CutLengths(ChartTools.UniqueTrackObjectCollection{ChartTools.StarPowerPhrase})">
            <summary>
            Cuts short star power phrases that exceed the start of the next phrase
            </summary>
            <param name="phrases">Star power phrases to cut the lengths of</param>
        </member>
        <member name="M:ChartTools.Tools.Optimizing.Optimizer.RemoveUneeded(ChartTools.UniqueTrackObjectCollection{ChartTools.Tempo})">
            <summary>
            Sorts tempo markers and removes redundant ones.
            </summary>
            <param name="markers">Tempo markers to remove the unneeded from</param>
        </member>
        <member name="M:ChartTools.Tools.Optimizing.Optimizer.RemoveUnneeded(ChartTools.UniqueTrackObjectCollection{ChartTools.TimeSignature})">
            <summary>
            Sorts time signatures and removes redundant ones.
            </summary>
            <param name="signatures">Time signatures to remove the unneeded from</param>
        </member>
        <member name="T:ChartTools.TrackObject">
            <summary>
            Object located on a track
            </summary>
        </member>
        <member name="P:ChartTools.TrackObject.Position">
            <summary>
            Position in beats from the start of the <see cref="T:ChartTools.Song"/> multiplied by <see cref="P:ChartTools.Metadata.Resolution"/>
            </summary>
        </member>
        <member name="M:ChartTools.TrackObject.#ctor(System.UInt32)">
            <summary>
            Creates a new instance of <see cref="T:ChartTools.TrackObject"/>.
            </summary>
            <param name="position">Value of <see cref="P:ChartTools.TrackObject.Position"/></param>
        </member>
        <member name="T:ChartTools.StarPowerPhrase">
            <summary>
            Sequence of chords that gives star power if all the contained chords are played successfully
            </summary>
        </member>
        <member name="P:ChartTools.StarPowerPhrase.Length">
            <summary>
            Duration of the <see cref="T:ChartTools.StarPowerPhrase"/>
            </summary>
        </member>
        <member name="M:ChartTools.StarPowerPhrase.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates an instance of <see cref="T:ChartTools.StarPowerPhrase"/>.
            </summary>
            <param name="position">Value of <see cref="P:ChartTools.TrackObject.Position"/></param>
            <param name="length">Value of <see cref="P:ChartTools.StarPowerPhrase.Length"/></param>
        </member>
        <member name="T:ChartTools.Track">
            <summary>
            Base class for tracks
            </summary>
        </member>
        <member name="P:ChartTools.Track.LocalEvents">
            <summary>
            Events specific to the <see cref="T:ChartTools.Track"/>
            </summary>
        </member>
        <member name="P:ChartTools.Track.StarPower">
            <summary>
            Sets of star power phrases
            </summary>
        </member>
        <member name="P:ChartTools.Track.Chords">
            <summary>
            Groups of notes of the same position
            </summary>
        </member>
        <member name="M:ChartTools.Track.FromFile(System.String,ChartTools.Instruments,ChartTools.Difficulty,ChartTools.IO.ReadingConfiguration)">
            <summary>
            Reads a track from a file
            </summary>
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReadTrack(System.String,ChartTools.Instruments,ChartTools.Difficulty,ChartTools.IO.ReadingConfiguration)"/>
        </member>
        <member name="M:ChartTools.Track.FromFile(System.String,ChartTools.Difficulty,ChartTools.IO.ReadingConfiguration)">
            <inheritdoc cref="M:ChartTools.IO.Chart.ChartParser.ReadDrumsTrack(System.String,ChartTools.Difficulty,ChartTools.IO.ReadingConfiguration)"/>
        </member>
        <member name="M:ChartTools.Track.FromFile(System.String,ChartTools.GHLInstrument,ChartTools.Difficulty,ChartTools.IO.ReadingConfiguration)">
            <inheritdoc cref="!:ChartParser.ReadTrack(string, GHLInstrument, Difficulty)"/>
        </member>
        <member name="M:ChartTools.Track.FromFile(System.String,ChartTools.StandardInstrument,ChartTools.Difficulty,ChartTools.IO.ReadingConfiguration)">
            <inheritdoc cref="!:ChartParser.ReadTrack(string, StandardInstrument, Difficulty)"/>
        </member>
        <member name="T:ChartTools.Track`1">
            <summary>
            Set of chords for a instrument at a certain difficulty
            </summary>
        </member>
        <member name="T:ChartTools.UniqueTrackObjectCollection`1">
            <summary>
            Set of track objects where each one must have a different position
            </summary>
        </member>
    </members>
</doc>
