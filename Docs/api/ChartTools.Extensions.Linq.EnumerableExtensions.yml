### YamlMime:ManagedReference
items:
- uid: ChartTools.Extensions.Linq.EnumerableExtensions
  commentId: T:ChartTools.Extensions.Linq.EnumerableExtensions
  id: EnumerableExtensions
  parent: ChartTools.Extensions.Linq
  children:
  - ChartTools.Extensions.Linq.EnumerableExtensions.All(System.Collections.Generic.IEnumerable{System.Boolean})
  - ChartTools.Extensions.Linq.EnumerableExtensions.AlternateBy``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  - ChartTools.Extensions.Linq.EnumerableExtensions.Alternate``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  - ChartTools.Extensions.Linq.EnumerableExtensions.Any(System.Collections.Generic.IEnumerable{System.Boolean})
  - ChartTools.Extensions.Linq.EnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},ChartTools.Extensions.EqualityComparison{``0})
  - ChartTools.Extensions.Linq.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0,System.Boolean@)
  - ChartTools.Extensions.Linq.EnumerableExtensions.ManyMaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - ChartTools.Extensions.Linq.EnumerableExtensions.ManyMinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - ChartTools.Extensions.Linq.EnumerableExtensions.NonNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})
  - ChartTools.Extensions.Linq.EnumerableExtensions.NonNull``1(System.Collections.Generic.IEnumerable{``0})
  - ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoopSkipFirst``1(System.Collections.Generic.IEnumerable{``0})
  - ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoop``1(System.Collections.Generic.IEnumerable{``0},``0)
  - ChartTools.Extensions.Linq.EnumerableExtensions.RemoveSection``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Predicate{``0})
  - ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSection``1(System.Collections.Generic.IEnumerable{``0},ChartTools.Extensions.Linq.SectionReplacement{``0})
  - ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{ChartTools.Extensions.Linq.SectionReplacement{``0}})
  - ChartTools.Extensions.Linq.EnumerableExtensions.Replace``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0)
  - ChartTools.Extensions.Linq.EnumerableExtensions.ToAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  - ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirstOfType``1(System.Collections.IEnumerable,``0@)
  - ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)
  - ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},``0@)
  - ChartTools.Extensions.Linq.EnumerableExtensions.UniqueBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - ChartTools.Extensions.Linq.EnumerableExtensions.Unique``1(System.Collections.Generic.IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions
  type: Class
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: EnumerableExtensions
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 5
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  syntax:
    content: public static class EnumerableExtensions
    content.vb: Public Module EnumerableExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.All(System.Collections.Generic.IEnumerable{System.Boolean})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.All(System.Collections.Generic.IEnumerable{System.Boolean})
  id: All(System.Collections.Generic.IEnumerable{System.Boolean})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: All(IEnumerable<bool>)
  nameWithType: EnumerableExtensions.All(IEnumerable<bool>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.All(System.Collections.Generic.IEnumerable<bool>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: All
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 12
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  summary: Checks that all booleans in a collection are <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>.
  example: []
  syntax:
    content: public static bool All(this IEnumerable<bool> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Boolean}
      description: Source of booleans
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if all booleans are <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> or the collection is empty
    content.vb: Public Shared Function All(source As IEnumerable(Of Boolean)) As Boolean
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.All*
  nameWithType.vb: EnumerableExtensions.All(IEnumerable(Of Boolean))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.All(System.Collections.Generic.IEnumerable(Of Boolean))
  name.vb: All(IEnumerable(Of Boolean))
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.Any(System.Collections.Generic.IEnumerable{System.Boolean})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.Any(System.Collections.Generic.IEnumerable{System.Boolean})
  id: Any(System.Collections.Generic.IEnumerable{System.Boolean})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Any(IEnumerable<bool>)
  nameWithType: EnumerableExtensions.Any(IEnumerable<bool>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.Any(System.Collections.Generic.IEnumerable<bool>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: Any
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 25
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  summary: Checks if any boolean in a collection is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>.
  example: []
  syntax:
    content: public static bool Any(this IEnumerable<bool> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Boolean}
      description: Source of booleans
    return:
      type: System.Boolean
    content.vb: Public Shared Function Any(source As IEnumerable(Of Boolean)) As Boolean
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.Any*
  nameWithType.vb: EnumerableExtensions.Any(IEnumerable(Of Boolean))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.Any(System.Collections.Generic.IEnumerable(Of Boolean))
  name.vb: Any(IEnumerable(Of Boolean))
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0,System.Boolean@)
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0,System.Boolean@)
  id: FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0,System.Boolean@)
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: FirstOrDefault<T>(IEnumerable<T>, Predicate<T>, T?, out bool)
  nameWithType: EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, Predicate<T>, T?, out bool)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.FirstOrDefault<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>, T?, out bool)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: FirstOrDefault
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 37
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  summary: Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.
  example: []
  syntax:
    content: public static T? FirstOrDefault<T>(this IEnumerable<T> source, Predicate<T> predicate, T? defaultValue, out bool returnedDefault)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to return an element from.
    - id: predicate
      type: System.Predicate{{T}}
      description: A function to test each element for a condition.
    - id: defaultValue
      type: '{T}'
    - id: returnedDefault
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if no items meeting the condition were found
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/default">default</a>(<code class="paramref">TSource</code>) if <code class="paramref">source</code> is empty or if no element passes the test specified by <code class="paramref">predicate</code>; otherwise, the first element in <code class="paramref">source</code> that passes the test specified by <code class="paramref">predicate</code>.
    content.vb: Public Shared Function FirstOrDefault(Of T)(source As IEnumerable(Of T), predicate As Predicate(Of T), defaultValue As T, returnedDefault As Boolean) As T
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.FirstOrDefault*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">source</code> or <code class="paramref">predicate</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: EnumerableExtensions.FirstOrDefault(Of T)(IEnumerable(Of T), Predicate(Of T), T, Boolean)
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.FirstOrDefault(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T), T, Boolean)
  name.vb: FirstOrDefault(Of T)(IEnumerable(Of T), Predicate(Of T), T, Boolean)
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)
  id: TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: TryGetFirst<T>(IEnumerable<T>, Predicate<T>, out T)
  nameWithType: EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, Predicate<T>, out T)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirst<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>, out T)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: TryGetFirst
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 58
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  summary: Tries to get the first item that meet a condition from en enumerable.
  example: []
  syntax:
    content: public static bool TryGetFirst<T>(this IEnumerable<T> source, Predicate<T> predicate, out T item)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: predicate
      type: System.Predicate{{T}}
      description: Method that returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if a given item meets the condition
    - id: item
      type: '{T}'
      description: Found item
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if an item was found
    content.vb: Public Shared Function TryGetFirst(Of T)(source As IEnumerable(Of T), predicate As Predicate(Of T), item As T) As Boolean
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirst*
  nameWithType.vb: EnumerableExtensions.TryGetFirst(Of T)(IEnumerable(Of T), Predicate(Of T), T)
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirst(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T), T)
  name.vb: TryGetFirst(Of T)(IEnumerable(Of T), Predicate(Of T), T)
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},``0@)
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},``0@)
  id: TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},``0@)
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: TryGetFirst<T>(IEnumerable<T>, out T)
  nameWithType: EnumerableExtensions.TryGetFirst<T>(IEnumerable<T>, out T)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirst<T>(System.Collections.Generic.IEnumerable<T>, out T)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: TryGetFirst
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 79
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  summary: Tries to get the first element of a collection.
  example: []
  syntax:
    content: public static bool TryGetFirst<T>(this IEnumerable<T> source, out T result)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Source of items
    - id: result
      type: '{T}'
      description: Found item
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if an item was found
    content.vb: Public Shared Function TryGetFirst(Of T)(source As IEnumerable(Of T), result As T) As Boolean
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirst*
  nameWithType.vb: EnumerableExtensions.TryGetFirst(Of T)(IEnumerable(Of T), T)
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirst(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: TryGetFirst(Of T)(IEnumerable(Of T), T)
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirstOfType``1(System.Collections.IEnumerable,``0@)
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirstOfType``1(System.Collections.IEnumerable,``0@)
  id: TryGetFirstOfType``1(System.Collections.IEnumerable,``0@)
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: TryGetFirstOfType<TResult>(IEnumerable, out TResult)
  nameWithType: EnumerableExtensions.TryGetFirstOfType<TResult>(IEnumerable, out TResult)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirstOfType<TResult>(System.Collections.IEnumerable, out TResult)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: TryGetFirstOfType
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 93
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  summary: Tries to get the first item of a given type in a collection.
  example: []
  syntax:
    content: public static bool TryGetFirstOfType<TResult>(this IEnumerable source, out TResult result)
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: Source of items
    - id: result
      type: '{TResult}'
      description: Found item
    typeParameters:
    - id: TResult
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if an item was found
    content.vb: Public Shared Function TryGetFirstOfType(Of TResult)(source As IEnumerable, result As TResult) As Boolean
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirstOfType*
  nameWithType.vb: EnumerableExtensions.TryGetFirstOfType(Of TResult)(IEnumerable, TResult)
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirstOfType(Of TResult)(System.Collections.IEnumerable, TResult)
  name.vb: TryGetFirstOfType(Of TResult)(IEnumerable, TResult)
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.NonNull``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.NonNull``1(System.Collections.Generic.IEnumerable{``0})
  id: NonNull``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: NonNull<T>(IEnumerable<T?>)
  nameWithType: EnumerableExtensions.NonNull<T>(IEnumerable<T?>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.NonNull<T>(System.Collections.Generic.IEnumerable<T?>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: NonNull
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 99
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  summary: Excludes <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> items.
  example: []
  syntax:
    content: public static IEnumerable<T> NonNull<T>(this IEnumerable<T?> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Shared Function NonNull(Of T)(source As IEnumerable(Of T)) As IEnumerable(Of T)
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.NonNull*
  nameWithType.vb: EnumerableExtensions.NonNull(Of T)(IEnumerable(Of T))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.NonNull(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: NonNull(Of T)(IEnumerable(Of T))
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.NonNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.NonNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})
  id: NonNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: NonNull<T>(IEnumerable<T?>)
  nameWithType: EnumerableExtensions.NonNull<T>(IEnumerable<T?>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.NonNull<T>(System.Collections.Generic.IEnumerable<T?>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: NonNull
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 100
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  syntax:
    content: 'public static IEnumerable<T> NonNull<T>(this IEnumerable<T?> source) where T : struct'
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{{T}}}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Shared Function NonNull(Of T As Structure)(source As IEnumerable(Of T?)) As IEnumerable(Of T)
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.NonNull*
  nameWithType.vb: EnumerableExtensions.NonNull(Of T)(IEnumerable(Of T?))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.NonNull(Of T)(System.Collections.Generic.IEnumerable(Of T?))
  name.vb: NonNull(Of T)(IEnumerable(Of T?))
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.Replace``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0)
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.Replace``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0)
  id: Replace``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0)
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Replace<T>(IEnumerable<T>, Predicate<T>, T)
  nameWithType: EnumerableExtensions.Replace<T>(IEnumerable<T>, Predicate<T>, T)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.Replace<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>, T)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: Replace
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 114
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  summary: Replaces items that meet a condition with another item.
  example: []
  syntax:
    content: public static IEnumerable<T> Replace<T>(this IEnumerable<T> source, Predicate<T> predicate, T replacement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The IEnumerable&lt;out T&gt; to replace the items of
    - id: predicate
      type: System.Predicate{{T}}
      description: A function that determines if an item must be replaced
    - id: replacement
      type: '{T}'
      description: The item to replace items with
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Shared Function Replace(Of T)(source As IEnumerable(Of T), predicate As Predicate(Of T), replacement As T) As IEnumerable(Of T)
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.Replace*
  nameWithType.vb: EnumerableExtensions.Replace(Of T)(IEnumerable(Of T), Predicate(Of T), T)
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.Replace(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T), T)
  name.vb: Replace(Of T)(IEnumerable(Of T), Predicate(Of T), T)
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSection``1(System.Collections.Generic.IEnumerable{``0},ChartTools.Extensions.Linq.SectionReplacement{``0})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSection``1(System.Collections.Generic.IEnumerable{``0},ChartTools.Extensions.Linq.SectionReplacement{``0})
  id: ReplaceSection``1(System.Collections.Generic.IEnumerable{``0},ChartTools.Extensions.Linq.SectionReplacement{``0})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ReplaceSection<T>(IEnumerable<T>, SectionReplacement<T>)
  nameWithType: EnumerableExtensions.ReplaceSection<T>(IEnumerable<T>, SectionReplacement<T>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSection<T>(System.Collections.Generic.IEnumerable<T>, ChartTools.Extensions.Linq.SectionReplacement<T>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: ReplaceSection
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 128
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  summary: Replaces a section with other items.
  remarks: Items that match startReplace or endReplace are not included in the returned items.
  example: []
  syntax:
    content: public static IEnumerable<T> ReplaceSection<T>(this IEnumerable<T> source, SectionReplacement<T> replacement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Items to replace a section in
    - id: replacement
      type: ChartTools.Extensions.Linq.SectionReplacement{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Shared Function ReplaceSection(Of T)(source As IEnumerable(Of T), replacement As SectionReplacement(Of T)) As IEnumerable(Of T)
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSection*
  nameWithType.vb: EnumerableExtensions.ReplaceSection(Of T)(IEnumerable(Of T), SectionReplacement(Of T))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSection(Of T)(System.Collections.Generic.IEnumerable(Of T), ChartTools.Extensions.Linq.SectionReplacement(Of T))
  name.vb: ReplaceSection(Of T)(IEnumerable(Of T), SectionReplacement(Of T))
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{ChartTools.Extensions.Linq.SectionReplacement{``0}})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{ChartTools.Extensions.Linq.SectionReplacement{``0}})
  id: ReplaceSections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{ChartTools.Extensions.Linq.SectionReplacement{``0}})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ReplaceSections<T>(IEnumerable<T>, IEnumerable<SectionReplacement<T>>)
  nameWithType: EnumerableExtensions.ReplaceSections<T>(IEnumerable<T>, IEnumerable<SectionReplacement<T>>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSections<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<ChartTools.Extensions.Linq.SectionReplacement<T>>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: ReplaceSections
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 183
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  summary: Replaces multiple sections of items.
  remarks: Items that match startReplace or endReplace are not included in the returned items.
  example: []
  syntax:
    content: public static IEnumerable<T> ReplaceSections<T>(this IEnumerable<T> source, IEnumerable<SectionReplacement<T>> replacements)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Items to replace sections in
    - id: replacements
      type: System.Collections.Generic.IEnumerable{ChartTools.Extensions.Linq.SectionReplacement{{T}}}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Shared Function ReplaceSections(Of T)(source As IEnumerable(Of T), replacements As IEnumerable(Of SectionReplacement(Of T))) As IEnumerable(Of T)
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSections*
  nameWithType.vb: EnumerableExtensions.ReplaceSections(Of T)(IEnumerable(Of T), IEnumerable(Of SectionReplacement(Of T)))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSections(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of ChartTools.Extensions.Linq.SectionReplacement(Of T)))
  name.vb: ReplaceSections(Of T)(IEnumerable(Of T), IEnumerable(Of SectionReplacement(Of T)))
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.RemoveSection``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Predicate{``0})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.RemoveSection``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Predicate{``0})
  id: RemoveSection``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Predicate{``0})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: RemoveSection<T>(IEnumerable<T>, Predicate<T>, Predicate<T>)
  nameWithType: EnumerableExtensions.RemoveSection<T>(IEnumerable<T>, Predicate<T>, Predicate<T>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.RemoveSection<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: RemoveSection
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 259
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  summary: Removes a section of items.
  remarks: Items that match startRemove or endRemove
  example: []
  syntax:
    content: public static IEnumerable<T> RemoveSection<T>(this IEnumerable<T> source, Predicate<T> startRemove, Predicate<T> endRemove)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Source items to remove a section of
    - id: startRemove
      type: System.Predicate{{T}}
      description: Function that determines the start of the section to replace
    - id: endRemove
      type: System.Predicate{{T}}
      description: Function that determines the end of the section to replace
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Shared Function RemoveSection(Of T)(source As IEnumerable(Of T), startRemove As Predicate(Of T), endRemove As Predicate(Of T)) As IEnumerable(Of T)
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.RemoveSection*
  nameWithType.vb: EnumerableExtensions.RemoveSection(Of T)(IEnumerable(Of T), Predicate(Of T), Predicate(Of T))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.RemoveSection(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T), System.Predicate(Of T))
  name.vb: RemoveSection(Of T)(IEnumerable(Of T), Predicate(Of T), Predicate(Of T))
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoop``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoop``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: RelativeLoop``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: RelativeLoop<T>(IEnumerable<T>, T?)
  nameWithType: EnumerableExtensions.RelativeLoop<T>(IEnumerable<T>, T?)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoop<T>(System.Collections.Generic.IEnumerable<T>, T?)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: RelativeLoop
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 289
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  summary: Loops through a set of objects and returns a set of tuples containing the current object and the previous one.
  example: []
  syntax:
    content: public static IEnumerable<(T? previous, T current)> RelativeLoop<T>(this IEnumerable<T> source, T? firstPrevious = default)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Items to loop through
    - id: firstPrevious
      type: '{T}'
      description: Value of the previous item in the first call of the action
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{{T},{T}}}
    content.vb: Public Shared Function RelativeLoop(Of T)(source As IEnumerable(Of T), firstPrevious As T = Nothing) As IEnumerable(Of (previous As T, current As T))
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoop*
  nameWithType.vb: EnumerableExtensions.RelativeLoop(Of T)(IEnumerable(Of T), T)
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoop(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: RelativeLoop(Of T)(IEnumerable(Of T), T)
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoopSkipFirst``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoopSkipFirst``1(System.Collections.Generic.IEnumerable{``0})
  id: RelativeLoopSkipFirst``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: RelativeLoopSkipFirst<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.RelativeLoopSkipFirst<T>(IEnumerable<T>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoopSkipFirst<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: RelativeLoopSkipFirst
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 299
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  syntax:
    content: public static IEnumerable<(T previous, T current)> RelativeLoopSkipFirst<T>(this IEnumerable<T> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{{T},{T}}}
    content.vb: Public Shared Function RelativeLoopSkipFirst(Of T)(source As IEnumerable(Of T)) As IEnumerable(Of (previous As T, current As T))
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoopSkipFirst*
  nameWithType.vb: EnumerableExtensions.RelativeLoopSkipFirst(Of T)(IEnumerable(Of T))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoopSkipFirst(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: RelativeLoopSkipFirst(Of T)(IEnumerable(Of T))
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},ChartTools.Extensions.EqualityComparison{``0})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},ChartTools.Extensions.EqualityComparison{``0})
  id: Distinct``1(System.Collections.Generic.IEnumerable{``0},ChartTools.Extensions.EqualityComparison{``0})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Distinct<T>(IEnumerable<T>, EqualityComparison<T?>)
  nameWithType: EnumerableExtensions.Distinct<T>(IEnumerable<T>, EqualityComparison<T?>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.Distinct<T>(System.Collections.Generic.IEnumerable<T>, ChartTools.Extensions.EqualityComparison<T?>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: Distinct
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 317
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  summary: Returns distinct elements of a sequence using a method to determine the equality of elements
  example: []
  syntax:
    content: public static IEnumerable<T> Distinct<T>(this IEnumerable<T> source, EqualityComparison<T?> comparison)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: comparison
      type: ChartTools.Extensions.EqualityComparison{{T}}
      description: Method that determines if two elements are the same
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Shared Function Distinct(Of T)(source As IEnumerable(Of T), comparison As EqualityComparison(Of T)) As IEnumerable(Of T)
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.Distinct*
  nameWithType.vb: EnumerableExtensions.Distinct(Of T)(IEnumerable(Of T), EqualityComparison(Of T))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.Distinct(Of T)(System.Collections.Generic.IEnumerable(Of T), ChartTools.Extensions.EqualityComparison(Of T))
  name.vb: Distinct(Of T)(IEnumerable(Of T), EqualityComparison(Of T))
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.Unique``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.Unique``1(System.Collections.Generic.IEnumerable{``0})
  id: Unique``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Unique<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.Unique<T>(IEnumerable<T>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.Unique<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: Unique
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 318
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  syntax:
    content: public static bool Unique<T>(this IEnumerable<T> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function Unique(Of T)(source As IEnumerable(Of T)) As Boolean
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.Unique*
  nameWithType.vb: EnumerableExtensions.Unique(Of T)(IEnumerable(Of T))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.Unique(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Unique(Of T)(IEnumerable(Of T))
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.UniqueBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.UniqueBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: UniqueBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: UniqueBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  nameWithType: EnumerableExtensions.UniqueBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.UniqueBy<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: UniqueBy
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 319
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  syntax:
    content: public static bool UniqueBy<T, TKey>(this IEnumerable<T> source, Func<T, TKey> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: selector
      type: System.Func{{T},{TKey}}
    typeParameters:
    - id: T
    - id: TKey
    return:
      type: System.Boolean
    content.vb: Public Shared Function UniqueBy(Of T, TKey)(source As IEnumerable(Of T), selector As Func(Of T, TKey)) As Boolean
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.UniqueBy*
  nameWithType.vb: EnumerableExtensions.UniqueBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.UniqueBy(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey))
  name.vb: UniqueBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.ManyMinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.ManyMinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: ManyMinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ManyMinBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  nameWithType: EnumerableExtensions.ManyMinBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.ManyMinBy<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: ManyMinBy
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 356
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  summary: Finds the items for which a function returns the smallest value.
  example: []
  syntax:
    content: 'public static IEnumerable<T> ManyMinBy<T, TKey>(this IEnumerable<T> source, Func<T, TKey> selector) where TKey : IComparable<TKey>'
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Items to find the minimum or maximum of
    - id: selector
      type: System.Func{{T},{TKey}}
      description: Function that gets the key to use in the comparison from an item
    typeParameters:
    - id: T
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Shared Function ManyMinBy(Of T, TKey As IComparable(Of TKey))(source As IEnumerable(Of T), selector As Func(Of T, TKey)) As IEnumerable(Of T)
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.ManyMinBy*
  nameWithType.vb: EnumerableExtensions.ManyMinBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.ManyMinBy(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey))
  name.vb: ManyMinBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.ManyMaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.ManyMaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: ManyMaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ManyMaxBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  nameWithType: EnumerableExtensions.ManyMaxBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.ManyMaxBy<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: ManyMaxBy
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 362
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  summary: Finds the items for which a function returns the greatest value.
  example: []
  syntax:
    content: 'public static IEnumerable<T> ManyMaxBy<T, TKey>(this IEnumerable<T> source, Func<T, TKey> selector) where TKey : IComparable<TKey>'
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Items to find the minimum or maximum of
    - id: selector
      type: System.Func{{T},{TKey}}
      description: Function that gets the key to use in the comparison from an item
    typeParameters:
    - id: T
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Shared Function ManyMaxBy(Of T, TKey As IComparable(Of TKey))(source As IEnumerable(Of T), selector As Func(Of T, TKey)) As IEnumerable(Of T)
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.ManyMaxBy*
  nameWithType.vb: EnumerableExtensions.ManyMaxBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.ManyMaxBy(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey))
  name.vb: ManyMaxBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.ToAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.ToAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  id: ToAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ToAsyncEnumerable<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.ToAsyncEnumerable<T>(IEnumerable<T>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.ToAsyncEnumerable<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: ToAsyncEnumerable
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 365
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  syntax:
    content: public static IAsyncEnumerable<T> ToAsyncEnumerable<T>(this IEnumerable<T> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IAsyncEnumerable{{T}}
    content.vb: Public Shared Function ToAsyncEnumerable(Of T)(source As IEnumerable(Of T)) As IAsyncEnumerable(Of T)
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.ToAsyncEnumerable*
  nameWithType.vb: EnumerableExtensions.ToAsyncEnumerable(Of T)(IEnumerable(Of T))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.ToAsyncEnumerable(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ToAsyncEnumerable(Of T)(IEnumerable(Of T))
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.Alternate``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.Alternate``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  id: Alternate``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Alternate<T>(IEnumerable<IEnumerable<T>>)
  nameWithType: EnumerableExtensions.Alternate<T>(IEnumerable<IEnumerable<T>>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.Alternate<T>(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: Alternate
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 372
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  syntax:
    content: public static IEnumerable<T> Alternate<T>(this IEnumerable<IEnumerable<T>> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Shared Function Alternate(Of T)(source As IEnumerable(Of IEnumerable(Of T))) As IEnumerable(Of T)
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.Alternate*
  nameWithType.vb: EnumerableExtensions.Alternate(Of T)(IEnumerable(Of IEnumerable(Of T)))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.Alternate(Of T)(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Alternate(Of T)(IEnumerable(Of IEnumerable(Of T)))
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.AlternateBy``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  commentId: M:ChartTools.Extensions.Linq.EnumerableExtensions.AlternateBy``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  id: AlternateBy``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  isExtensionMethod: true
  parent: ChartTools.Extensions.Linq.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: AlternateBy<T, TKey>(IEnumerable<IEnumerable<T>>, Func<T, TKey>)
  nameWithType: EnumerableExtensions.AlternateBy<T, TKey>(IEnumerable<IEnumerable<T>>, Func<T, TKey>)
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.AlternateBy<T, TKey>(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>, System.Func<T, TKey>)
  type: Method
  source:
    remote:
      path: ChartTools/Extensions/Linq/EnumerableExtensions.cs
      branch: 64-rework-docs-website
      repo: https://github.com/TheBoxyBear/charttools.git
    id: AlternateBy
    path: ../ChartTools/Extensions/Linq/EnumerableExtensions.cs
    startLine: 373
  assemblies:
  - ChartTools
  namespace: ChartTools.Extensions.Linq
  syntax:
    content: 'public static IEnumerable<T> AlternateBy<T, TKey>(this IEnumerable<IEnumerable<T>> source, Func<T, TKey> selector) where TKey : IComparable<TKey>'
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
    - id: selector
      type: System.Func{{T},{TKey}}
    typeParameters:
    - id: T
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Shared Function AlternateBy(Of T, TKey As IComparable(Of TKey))(source As IEnumerable(Of IEnumerable(Of T)), selector As Func(Of T, TKey)) As IEnumerable(Of T)
  overload: ChartTools.Extensions.Linq.EnumerableExtensions.AlternateBy*
  nameWithType.vb: EnumerableExtensions.AlternateBy(Of T, TKey)(IEnumerable(Of IEnumerable(Of T)), Func(Of T, TKey))
  fullName.vb: ChartTools.Extensions.Linq.EnumerableExtensions.AlternateBy(Of T, TKey)(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T)), System.Func(Of T, TKey))
  name.vb: AlternateBy(Of T, TKey)(IEnumerable(Of IEnumerable(Of T)), Func(Of T, TKey))
references:
- uid: ChartTools.Extensions.Linq
  commentId: N:ChartTools.Extensions.Linq
  href: ChartTools.html
  name: ChartTools.Extensions.Linq
  nameWithType: ChartTools.Extensions.Linq
  fullName: ChartTools.Extensions.Linq
  spec.csharp:
  - uid: ChartTools
    name: ChartTools
    href: ChartTools.html
  - name: .
  - uid: ChartTools.Extensions
    name: Extensions
    href: ChartTools.Extensions.html
  - name: .
  - uid: ChartTools.Extensions.Linq
    name: Linq
    href: ChartTools.Extensions.Linq.html
  spec.vb:
  - uid: ChartTools
    name: ChartTools
    href: ChartTools.html
  - name: .
  - uid: ChartTools.Extensions
    name: Extensions
    href: ChartTools.Extensions.html
  - name: .
  - uid: ChartTools.Extensions.Linq
    name: Linq
    href: ChartTools.Extensions.Linq.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.All*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.All
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_All_System_Collections_Generic_IEnumerable_System_Boolean__
  name: All
  nameWithType: EnumerableExtensions.All
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.All
- uid: System.Collections.Generic.IEnumerable{System.Boolean}
  commentId: T:System.Collections.Generic.IEnumerable{System.Boolean}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<bool>
  nameWithType: IEnumerable<bool>
  fullName: System.Collections.Generic.IEnumerable<bool>
  nameWithType.vb: IEnumerable(Of Boolean)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Boolean)
  name.vb: IEnumerable(Of Boolean)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.Any*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.Any
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_Any_System_Collections_Generic_IEnumerable_System_Boolean__
  name: Any
  nameWithType: EnumerableExtensions.Any
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.Any
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.FirstOrDefault*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.FirstOrDefault
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_FirstOrDefault__1_System_Collections_Generic_IEnumerable___0__System_Predicate___0____0_System_Boolean__
  name: FirstOrDefault
  nameWithType: EnumerableExtensions.FirstOrDefault
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.FirstOrDefault
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Predicate{{T}}
  commentId: T:System.Predicate{``0}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirst*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirst
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_TryGetFirst__1_System_Collections_Generic_IEnumerable___0__System_Predicate___0____0__
  name: TryGetFirst
  nameWithType: EnumerableExtensions.TryGetFirst
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirst
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirstOfType*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirstOfType
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_TryGetFirstOfType__1_System_Collections_IEnumerable___0__
  name: TryGetFirstOfType
  nameWithType: EnumerableExtensions.TryGetFirstOfType
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.TryGetFirstOfType
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: TResult
  commentId: '!:TResult'
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.NonNull*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.NonNull
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_NonNull__1_System_Collections_Generic_IEnumerable___0__
  name: NonNull
  nameWithType: EnumerableExtensions.NonNull
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.NonNull
- uid: System.Collections.Generic.IEnumerable{System.Nullable{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Nullable{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T?>
  nameWithType: IEnumerable<T?>
  fullName: System.Collections.Generic.IEnumerable<T?>
  nameWithType.vb: IEnumerable(Of T?)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T?)
  name.vb: IEnumerable(Of T?)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: '?'
  - name: )
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.Replace*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.Replace
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_Replace__1_System_Collections_Generic_IEnumerable___0__System_Predicate___0____0_
  name: Replace
  nameWithType: EnumerableExtensions.Replace
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.Replace
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSection*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSection
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_ReplaceSection__1_System_Collections_Generic_IEnumerable___0__ChartTools_Extensions_Linq_SectionReplacement___0__
  name: ReplaceSection
  nameWithType: EnumerableExtensions.ReplaceSection
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSection
- uid: ChartTools.Extensions.Linq.SectionReplacement{{T}}
  commentId: T:ChartTools.Extensions.Linq.SectionReplacement{``0}
  parent: ChartTools.Extensions.Linq
  definition: ChartTools.Extensions.Linq.SectionReplacement`1
  href: ChartTools.Extensions.Linq.SectionReplacement-1.html
  name: SectionReplacement<T>
  nameWithType: SectionReplacement<T>
  fullName: ChartTools.Extensions.Linq.SectionReplacement<T>
  nameWithType.vb: SectionReplacement(Of T)
  fullName.vb: ChartTools.Extensions.Linq.SectionReplacement(Of T)
  name.vb: SectionReplacement(Of T)
  spec.csharp:
  - uid: ChartTools.Extensions.Linq.SectionReplacement`1
    name: SectionReplacement
    href: ChartTools.Extensions.Linq.SectionReplacement-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: ChartTools.Extensions.Linq.SectionReplacement`1
    name: SectionReplacement
    href: ChartTools.Extensions.Linq.SectionReplacement-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: ChartTools.Extensions.Linq.SectionReplacement`1
  commentId: T:ChartTools.Extensions.Linq.SectionReplacement`1
  href: ChartTools.Extensions.Linq.SectionReplacement-1.html
  name: SectionReplacement<T>
  nameWithType: SectionReplacement<T>
  fullName: ChartTools.Extensions.Linq.SectionReplacement<T>
  nameWithType.vb: SectionReplacement(Of T)
  fullName.vb: ChartTools.Extensions.Linq.SectionReplacement(Of T)
  name.vb: SectionReplacement(Of T)
  spec.csharp:
  - uid: ChartTools.Extensions.Linq.SectionReplacement`1
    name: SectionReplacement
    href: ChartTools.Extensions.Linq.SectionReplacement-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: ChartTools.Extensions.Linq.SectionReplacement`1
    name: SectionReplacement
    href: ChartTools.Extensions.Linq.SectionReplacement-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSections*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSections
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_ReplaceSections__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable_ChartTools_Extensions_Linq_SectionReplacement___0___
  name: ReplaceSections
  nameWithType: EnumerableExtensions.ReplaceSections
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.ReplaceSections
- uid: System.Collections.Generic.IEnumerable{ChartTools.Extensions.Linq.SectionReplacement{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{ChartTools.Extensions.Linq.SectionReplacement{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<SectionReplacement<T>>
  nameWithType: IEnumerable<SectionReplacement<T>>
  fullName: System.Collections.Generic.IEnumerable<ChartTools.Extensions.Linq.SectionReplacement<T>>
  nameWithType.vb: IEnumerable(Of SectionReplacement(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of ChartTools.Extensions.Linq.SectionReplacement(Of T))
  name.vb: IEnumerable(Of SectionReplacement(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: ChartTools.Extensions.Linq.SectionReplacement`1
    name: SectionReplacement
    href: ChartTools.Extensions.Linq.SectionReplacement-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: ChartTools.Extensions.Linq.SectionReplacement`1
    name: SectionReplacement
    href: ChartTools.Extensions.Linq.SectionReplacement-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.RemoveSection*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.RemoveSection
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_RemoveSection__1_System_Collections_Generic_IEnumerable___0__System_Predicate___0__System_Predicate___0__
  name: RemoveSection
  nameWithType: EnumerableExtensions.RemoveSection
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.RemoveSection
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoop*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoop
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_RelativeLoop__1_System_Collections_Generic_IEnumerable___0____0_
  name: RelativeLoop
  nameWithType: EnumerableExtensions.RelativeLoop
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoop
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{{T},{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<(T previous, T current)>
  nameWithType: IEnumerable<(T previous, T current)>
  fullName: System.Collections.Generic.IEnumerable<(T previous, T current)>
  nameWithType.vb: IEnumerable(Of (previous As T, current As T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of (previous As T, current As T))
  name.vb: IEnumerable(Of (previous As T, current As T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: (
  - name: T
  - name: " "
  - uid: System.ValueTuple{``0,``0}.previous
    name: previous
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple---0,--0-.previous
  - name: ','
  - name: " "
  - name: T
  - name: " "
  - uid: System.ValueTuple{``0,``0}.current
    name: current
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple---0,--0-.current
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{``0,``0}.previous
    name: previous
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple---0,--0-.previous
  - name: " "
  - name: As
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.ValueTuple{``0,``0}.current
    name: current
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple---0,--0-.current
  - name: " "
  - name: As
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoopSkipFirst*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoopSkipFirst
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_RelativeLoopSkipFirst__1_System_Collections_Generic_IEnumerable___0__
  name: RelativeLoopSkipFirst
  nameWithType: EnumerableExtensions.RelativeLoopSkipFirst
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.RelativeLoopSkipFirst
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.Distinct*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.Distinct
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_Distinct__1_System_Collections_Generic_IEnumerable___0__ChartTools_Extensions_EqualityComparison___0__
  name: Distinct
  nameWithType: EnumerableExtensions.Distinct
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.Distinct
- uid: ChartTools.Extensions.EqualityComparison{{T}}
  commentId: T:ChartTools.Extensions.EqualityComparison{`0}
  parent: ChartTools.Extensions
  definition: ChartTools.Extensions.EqualityComparison`1
  href: ChartTools.Extensions.EqualityComparison-1.html
  name: EqualityComparison<T>
  nameWithType: EqualityComparison<T>
  fullName: ChartTools.Extensions.EqualityComparison<T>
  nameWithType.vb: EqualityComparison(Of T)
  fullName.vb: ChartTools.Extensions.EqualityComparison(Of T)
  name.vb: EqualityComparison(Of T)
  spec.csharp:
  - uid: ChartTools.Extensions.EqualityComparison`1
    name: EqualityComparison
    href: ChartTools.Extensions.EqualityComparison-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: ChartTools.Extensions.EqualityComparison`1
    name: EqualityComparison
    href: ChartTools.Extensions.EqualityComparison-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: ChartTools.Extensions.EqualityComparison`1
  commentId: T:ChartTools.Extensions.EqualityComparison`1
  href: ChartTools.Extensions.EqualityComparison-1.html
  name: EqualityComparison<T>
  nameWithType: EqualityComparison<T>
  fullName: ChartTools.Extensions.EqualityComparison<T>
  nameWithType.vb: EqualityComparison(Of T)
  fullName.vb: ChartTools.Extensions.EqualityComparison(Of T)
  name.vb: EqualityComparison(Of T)
  spec.csharp:
  - uid: ChartTools.Extensions.EqualityComparison`1
    name: EqualityComparison
    href: ChartTools.Extensions.EqualityComparison-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: ChartTools.Extensions.EqualityComparison`1
    name: EqualityComparison
    href: ChartTools.Extensions.EqualityComparison-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: ChartTools.Extensions
  commentId: N:ChartTools.Extensions
  href: ChartTools.html
  name: ChartTools.Extensions
  nameWithType: ChartTools.Extensions
  fullName: ChartTools.Extensions
  spec.csharp:
  - uid: ChartTools
    name: ChartTools
    href: ChartTools.html
  - name: .
  - uid: ChartTools.Extensions
    name: Extensions
    href: ChartTools.Extensions.html
  spec.vb:
  - uid: ChartTools
    name: ChartTools
    href: ChartTools.html
  - name: .
  - uid: ChartTools.Extensions
    name: Extensions
    href: ChartTools.Extensions.html
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.Unique*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.Unique
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_Unique__1_System_Collections_Generic_IEnumerable___0__
  name: Unique
  nameWithType: EnumerableExtensions.Unique
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.Unique
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.UniqueBy*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.UniqueBy
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_UniqueBy__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__
  name: UniqueBy
  nameWithType: EnumerableExtensions.UniqueBy
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.UniqueBy
- uid: System.Func{{T},{TKey}}
  commentId: T:System.Func{`0,`1}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TKey>
  nameWithType: Func<T, TKey>
  fullName: System.Func<T, TKey>
  nameWithType.vb: Func(Of T, TKey)
  fullName.vb: System.Func(Of T, TKey)
  name.vb: Func(Of T, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.ManyMinBy*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.ManyMinBy
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_ManyMinBy__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__
  name: ManyMinBy
  nameWithType: EnumerableExtensions.ManyMinBy
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.ManyMinBy
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.ManyMaxBy*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.ManyMaxBy
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_ManyMaxBy__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__
  name: ManyMaxBy
  nameWithType: EnumerableExtensions.ManyMaxBy
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.ManyMaxBy
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.ToAsyncEnumerable*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.ToAsyncEnumerable
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_ToAsyncEnumerable__1_System_Collections_Generic_IEnumerable___0__
  name: ToAsyncEnumerable
  nameWithType: EnumerableExtensions.ToAsyncEnumerable
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.ToAsyncEnumerable
- uid: System.Collections.Generic.IAsyncEnumerable{{T}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  name: IAsyncEnumerable<T>
  nameWithType: IAsyncEnumerable<T>
  fullName: System.Collections.Generic.IAsyncEnumerable<T>
  nameWithType.vb: IAsyncEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of T)
  name.vb: IAsyncEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IAsyncEnumerable`1
  commentId: T:System.Collections.Generic.IAsyncEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  name: IAsyncEnumerable<T>
  nameWithType: IAsyncEnumerable<T>
  fullName: System.Collections.Generic.IAsyncEnumerable<T>
  nameWithType.vb: IAsyncEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of T)
  name.vb: IAsyncEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.Alternate*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.Alternate
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_Alternate__1_System_Collections_Generic_IEnumerable_System_Collections_Generic_IEnumerable___0___
  name: Alternate
  nameWithType: EnumerableExtensions.Alternate
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.Alternate
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IEnumerable<T>>
  nameWithType: IEnumerable<IEnumerable<T>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: IEnumerable(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: ChartTools.Extensions.Linq.EnumerableExtensions.AlternateBy*
  commentId: Overload:ChartTools.Extensions.Linq.EnumerableExtensions.AlternateBy
  href: ChartTools.Extensions.Linq.EnumerableExtensions.html#ChartTools_Extensions_Linq_EnumerableExtensions_AlternateBy__2_System_Collections_Generic_IEnumerable_System_Collections_Generic_IEnumerable___0___System_Func___0___1__
  name: AlternateBy
  nameWithType: EnumerableExtensions.AlternateBy
  fullName: ChartTools.Extensions.Linq.EnumerableExtensions.AlternateBy
